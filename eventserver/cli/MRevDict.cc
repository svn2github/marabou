//
// File generated by /usr/cern/Linux_rh7.2/root_new/bin/rootcint at Thu Mar 27 15:10:13 2003.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

#include "MRevDict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "RtypesImp.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void REvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *REvent_IsA(const void*);
   void *new_REvent(void *p = 0);
   void *newArray_REvent(Long_t size);
   void delete_REvent(void *p);
   void deleteArray_REvent(void *p);
   void destruct_REvent(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const REvent*)
   {
      REvent *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("REvent", REvent::Class_Version(), "MRevBuffer.h", 25,
                  typeid(REvent), DefineBehavior(ptr, ptr),
                  &::REvent::Dictionary, &REvent_IsA, 0);
      instance.SetNew(&new_REvent);
      instance.SetNewArray(&newArray_REvent);
      instance.SetDelete(&delete_REvent);
      instance.SetDeleteArray(&deleteArray_REvent);
      instance.SetDestructor(&destruct_REvent);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const REvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void MRevBuffer_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *MRevBuffer_IsA(const void*);
   void delete_MRevBuffer(void *p);
   void deleteArray_MRevBuffer(void *p);
   void destruct_MRevBuffer(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const MRevBuffer*)
   {
      MRevBuffer *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("MRevBuffer", MRevBuffer::Class_Version(), "MRevBuffer.h", 48,
                  typeid(MRevBuffer), DefineBehavior(ptr, ptr),
                  &::MRevBuffer::Dictionary, &MRevBuffer_IsA, 0);
      instance.SetDelete(&delete_MRevBuffer);
      instance.SetDeleteArray(&deleteArray_MRevBuffer);
      instance.SetDestructor(&destruct_MRevBuffer);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const MRevBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *REvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *REvent::Class_Name()
{
   return "REvent";
}

//______________________________________________________________________________
const char *REvent::ImplFileName()
{
   return ROOT::GenerateInitInstance((const REvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int REvent::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const REvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void REvent::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const REvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *REvent::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const REvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MRevBuffer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MRevBuffer::Class_Name()
{
   return "MRevBuffer";
}

//______________________________________________________________________________
const char *MRevBuffer::ImplFileName()
{
   return ROOT::GenerateInitInstance((const MRevBuffer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRevBuffer::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const MRevBuffer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRevBuffer::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const MRevBuffer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRevBuffer::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const MRevBuffer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void REvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class REvent.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void REvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class REvent.

      TClass *R__cl = REvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "iSize", &iSize);
      R__insp.Inspect(R__cl, R__parent, "iNumb", &iNumb);
      R__insp.Inspect(R__cl, R__parent, "*piData", &piData);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *REvent_IsA(const void *obj) {
      return ((::REvent*)obj)->IsA();
   }
   // Wrappers around operator new
   void *new_REvent(void *p) {
      return  p ? new(p) ::REvent : new ::REvent;
   }
   void *newArray_REvent(Long_t size) {
      return new ::REvent[size];
   }
   // Wrapper around operator delete
   void delete_REvent(void *p) {
      delete ((::REvent*)p);
   }
   void deleteArray_REvent(void *p) {
      delete [] ((::REvent*)p);
   }
   void destruct_REvent(void *p) {
      typedef ::REvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class REvent

//______________________________________________________________________________
void MRevBuffer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRevBuffer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void MRevBuffer::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MRevBuffer.

      TClass *R__cl = MRevBuffer::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pTSocket", &pTSocket);
      R__insp.Inspect(R__cl, R__parent, "iSocket", &iSocket);
      R__insp.Inspect(R__cl, R__parent, "iBufNo1", &iBufNo1);
      R__insp.Inspect(R__cl, R__parent, "iBufNo2", &iBufNo2);
      R__insp.Inspect(R__cl, R__parent, "iDebug", &iDebug);
      R__insp.Inspect(R__cl, R__parent, "iSwap", &iSwap);
      R__insp.Inspect(R__cl, R__parent, "iStatus", &iStatus);
      R__insp.Inspect(R__cl, R__parent, "iBufSizeAlloc", &iBufSizeAlloc);
      R__insp.Inspect(R__cl, R__parent, "iBufSize", &iBufSize);
      R__insp.Inspect(R__cl, R__parent, "iBufNo", &iBufNo);
      R__insp.Inspect(R__cl, R__parent, "iFragBegin", &iFragBegin);
      R__insp.Inspect(R__cl, R__parent, "iFragConc", &iFragConc);
      R__insp.Inspect(R__cl, R__parent, "iFragBeginIgn", &iFragBeginIgn);
      R__insp.Inspect(R__cl, R__parent, "iFragEndIgn", &iFragEndIgn);
      R__insp.Inspect(R__cl, R__parent, "iHeadPar", &iHeadPar);
      R__insp.Inspect(R__cl, R__parent, "iEvtMax", &iEvtMax);
      R__insp.Inspect(R__cl, R__parent, "iEvtNo", &iEvtNo);
      R__insp.Inspect(R__cl, R__parent, "iEvtRel", &iEvtRel);
      R__insp.Inspect(R__cl, R__parent, "iEvtBuf", &iEvtBuf);
      R__insp.Inspect(R__cl, R__parent, "iEvtPar", &iEvtPar);
      R__insp.Inspect(R__cl, R__parent, "*piBuf", &piBuf);
      R__insp.Inspect(R__cl, R__parent, "*piNextEvt", &piNextEvt);
      R__insp.Inspect(R__cl, R__parent, "*pEvt", &pEvt);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *MRevBuffer_IsA(const void *obj) {
      return ((::MRevBuffer*)obj)->IsA();
   }
   // Wrapper around operator delete
   void delete_MRevBuffer(void *p) {
      delete ((::MRevBuffer*)p);
   }
   void deleteArray_MRevBuffer(void *p) {
      delete [] ((::MRevBuffer*)p);
   }
   void destruct_MRevBuffer(void *p) {
      typedef ::MRevBuffer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class MRevBuffer

/********************************************************
* MRevDict.cc
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableMRevDict();

extern "C" void G__set_cpp_environmentMRevDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MRevBuffer.h");
  G__cpp_reset_tagtableMRevDict();
}
class G__MRevDictdOcc_tag {};

void* operator new(size_t size,G__MRevDictdOcc_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__MRevDictdOcc_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_MRevDictdOcc() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevMRevDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* REvent */
static int G__REvent_REvent_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   REvent *p=NULL;
   if(G__getaryconstruct()) p=new REvent[G__getaryconstruct()];
   else                    p=new REvent;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MRevDictLN_REvent);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ReFillHead_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((REvent*)(G__getstructoffset()))->ReFillHead((Int_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ReFillData_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((REvent*)(G__getstructoffset()))->ReFillData((Int_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ReGetNumb_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((REvent*)(G__getstructoffset()))->ReGetNumb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ReGetSize_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((REvent*)(G__getstructoffset()))->ReGetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ReGetData_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((REvent*)(G__getstructoffset()))->ReGetData((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_Class_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)REvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_Class_Name_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)REvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_Class_Version_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)REvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_Dictionary_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      REvent::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_IsA_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const REvent*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ShowMembers_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((REvent*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_Streamer_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((REvent*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_StreamerNVirtual_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((REvent*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_DeclFileName_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)REvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ImplFileLine_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)REvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_ImplFileName_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)REvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__REvent_DeclFileLine_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)REvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__REvent_REvent_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   REvent *p;
   p=new REvent(*(REvent*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MRevDictLN_REvent);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef REvent G__TREvent;
static int G__REvent_wAREvent_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (REvent *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (REvent *)((G__getstructoffset())+sizeof(REvent)*i);
   else  delete (REvent *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRevBuffer */
static int G__MRevBuffer_MRevBuffer_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MRevBuffer *p=NULL;
      p = new MRevBuffer((Int_t)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevOpen_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MRevBuffer*)(G__getstructoffset()))->RevOpen((char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevGetI_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,73,(long)((MRevBuffer*)(G__getstructoffset()))->RevGetI((TSocket*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevGet_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MRevBuffer*)(G__getstructoffset()))->RevGet((TSocket*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevStatus_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MRevBuffer*)(G__getstructoffset()))->RevStatus((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevBufWait_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MRevBuffer*)(G__getstructoffset()))->RevBufWait((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevBufsize_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MRevBuffer*)(G__getstructoffset()))->RevBufsize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_RevClose_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MRevBuffer*)(G__getstructoffset()))->RevClose((TSocket*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_Class_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)MRevBuffer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_Class_Name_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)MRevBuffer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_Class_Version_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)MRevBuffer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_Dictionary_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      MRevBuffer::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_IsA_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const MRevBuffer*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_ShowMembers_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MRevBuffer*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_Streamer_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MRevBuffer*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_StreamerNVirtual_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MRevBuffer*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_DeclFileName_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)MRevBuffer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_ImplFileLine_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)MRevBuffer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_ImplFileName_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)MRevBuffer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MRevBuffer_DeclFileLine_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)MRevBuffer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MRevBuffer_MRevBuffer_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   MRevBuffer *p;
   p=new MRevBuffer(*(MRevBuffer*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRevBuffer G__TMRevBuffer;
static int G__MRevBuffer_wAMRevBuffer_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (MRevBuffer *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (MRevBuffer *)((G__getstructoffset())+sizeof(MRevBuffer)*i);
   else  delete (MRevBuffer *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* REvent */

/* MRevBuffer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMRevDict {
 public:
  G__Sizep2memfuncMRevDict() {p=&G__Sizep2memfuncMRevDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMRevDict::*p)();
};

size_t G__get_sizep2memfuncMRevDict()
{
  G__Sizep2memfuncMRevDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMRevDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MRevDictLN_REvent))) {
     REvent *G__Lderived;
     G__Lderived=(REvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MRevDictLN_REvent),G__get_linked_tagnum(&G__MRevDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer))) {
     MRevBuffer *G__Lderived;
     G__Lderived=(MRevBuffer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer),G__get_linked_tagnum(&G__MRevDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMRevDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* REvent */
static void G__setup_memvarREvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MRevDictLN_REvent));
   { REvent *p; p=(REvent*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSize=",0,"event size (byte)");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iNumb=",0,"event number");
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piData=",0,"event parameter");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRevBuffer */
static void G__setup_memvarMRevBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer));
   { MRevBuffer *p; p=(MRevBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MRevDictLN_TSocket),-1,-1,4,"pTSocket=",0,"ptr socket of channel to event server");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSocket=",0,"socket id of channel to event server");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo1=",0,"first buffer no. received (test)");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo2=",0,"last buffer no. received (test)");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iDebug=",0,"verbosity level (test)");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSwap=",0,"> 0: swap event data");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iStatus=",0,"current status of server");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufSizeAlloc=",0,"allocated buffer size");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufSize=",0,"size current buffer");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iBufNo=",0,"current buffer no.");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragBegin=",0,"> 0: last buffer ended with fragment");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragConc=",0,"no. of concatenated fragments");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragBeginIgn=",0,"no. of ignored fragment begins");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iFragEndIgn=",0,"no. of ignored fragment ends");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iHeadPar=",0,"no. of (4 byte) parms buffer header");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtMax=",0,"no. of events requested");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtNo=",0,"last event no. handled");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtRel=",0,"rel. event no. in buffer");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtBuf=",0,"no. of events in current buffer");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iEvtPar=",0,"no. of parameters in event (incl. len)");
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piBuf=",0,"ptr event buffer");
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"piNextEvt=",0,"ptr first element next event");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MRevDictLN_REvent),-1,-1,4,"pEvt=",0,"ptr event class");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMRevDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncREvent(void) {
   /* REvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MRevDictLN_REvent));
   G__memfunc_setup("REvent",596,G__REvent_REvent_0_0,105,G__get_linked_tagnum(&G__MRevDictLN_REvent),-1,0,0,1,1,0,"","constructor",(void*)NULL,0);
   G__memfunc_setup("ReFillHead",944,G__REvent_ReFillHead_2_0,121,-1,-1,0,1,1,1,0,"I - 'Int_t' 0 - pHead","unpack and fill event header",(void*)NULL,0);
   G__memfunc_setup("ReFillData",952,G__REvent_ReFillData_3_0,121,-1,-1,0,1,1,1,0,"I - 'Int_t' 0 - pData","unpack and fill event data",(void*)NULL,0);
   G__memfunc_setup("ReGetNumb",873,G__REvent_ReGetNumb_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"","get event number",(void*)NULL,0);
   G__memfunc_setup("ReGetSize",882,G__REvent_ReGetSize_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"","get event size",(void*)NULL,0);
   G__memfunc_setup("ReGetData",849,G__REvent_ReGetData_6_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"i - 'Int_t' 0 - ichan","get event parameter ichan",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__REvent_Class_7_0,85,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__REvent_Class_Name_8_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__REvent_Class_Version_9_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__REvent_Dictionary_0_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__REvent_IsA_1_1,85,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__REvent_ShowMembers_2_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__REvent_Streamer_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__REvent_StreamerNVirtual_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__REvent_DeclFileName_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__REvent_ImplFileLine_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__REvent_ImplFileName_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__REvent_DeclFileLine_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("REvent",596,G__REvent_REvent_9_1,(int)('i'),G__get_linked_tagnum(&G__MRevDictLN_REvent),-1,0,1,1,1,0,"u 'REvent' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~REvent",722,G__REvent_wAREvent_0_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRevBuffer(void) {
   /* MRevBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer));
   G__memfunc_setup("MRevBuffer",980,G__MRevBuffer_MRevBuffer_0_0,105,G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer),-1,0,1,1,1,0,"i - 'Int_t' 0 - iMode","constructor",(void*)NULL,0);
   G__memfunc_setup("RevOpen",703,G__MRevBuffer_RevOpen_2_0,85,G__get_linked_tagnum(&G__MRevDictLN_TSocket),-1,0,3,1,1,0,
"C - - 0 - pNode i - 'Int_t' 0 - iPort "
"i - 'Int_t' 0 - iEvent",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevGetI",662,G__MRevBuffer_RevGetI_3_0,73,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"U 'TSocket' - 0 - pSocket i - 'Int_t' 0 - iFlush",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevGet",589,G__MRevBuffer_RevGet_4_0,85,G__get_linked_tagnum(&G__MRevDictLN_REvent),-1,0,3,1,1,0,
"U 'TSocket' - 0 - pSocket i - 'Int_t' 0 - iFlush "
"i - 'Int_t' 0 - iSkip",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevStatus",945,G__MRevBuffer_RevStatus_5_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"i - 'Int_t' 0 - iOut",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevBufWait",991,G__MRevBuffer_RevBufWait_6_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - iWait",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevBufsize",1029,G__MRevBuffer_RevBufsize_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RevClose",803,G__MRevBuffer_RevClose_8_0,121,-1,-1,0,1,1,1,0,"U 'TSocket' - 0 - pSocket","input Socket ptr ",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__MRevBuffer_Class_9_0,85,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__MRevBuffer_Class_Name_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__MRevBuffer_Class_Version_1_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__MRevBuffer_Dictionary_2_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__MRevBuffer_IsA_3_1,85,G__get_linked_tagnum(&G__MRevDictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__MRevBuffer_ShowMembers_4_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__MRevBuffer_Streamer_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MRevBuffer_StreamerNVirtual_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__MRevBuffer_DeclFileName_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__MRevBuffer_ImplFileLine_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__MRevBuffer_ImplFileName_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__MRevBuffer_DeclFileLine_0_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("MRevBuffer",980,G__MRevBuffer_MRevBuffer_1_2,(int)('i'),G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer),-1,0,1,1,1,0,"u 'MRevBuffer' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~MRevBuffer",1106,G__MRevBuffer_wAMRevBuffer_2_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMRevDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMRevDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMRevDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MRevDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MRevDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MRevDictLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__MRevDictLN_REvent = { "REvent" , 99 , -1 };
G__linked_taginfo G__MRevDictLN_MRevBuffer = { "MRevBuffer" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMRevDict() {
  G__MRevDictLN_TClass.tagnum = -1 ;
  G__MRevDictLN_TObject.tagnum = -1 ;
  G__MRevDictLN_TSocket.tagnum = -1 ;
  G__MRevDictLN_REvent.tagnum = -1 ;
  G__MRevDictLN_MRevBuffer.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMRevDict() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__MRevDictLN_REvent),sizeof(REvent),-1,29952,"prototype for event",G__setup_memvarREvent,G__setup_memfuncREvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__MRevDictLN_MRevBuffer),sizeof(MRevBuffer),-1,29696,"prototype for remote event buffer",G__setup_memvarMRevBuffer,G__setup_memfuncMRevBuffer);
}
extern "C" void G__cpp_setupMRevDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMRevDict()");
  G__set_cpp_environmentMRevDict();
  G__cpp_setup_tagtableMRevDict();

  G__cpp_setup_inheritanceMRevDict();

  G__cpp_setup_typetableMRevDict();

  G__cpp_setup_memvarMRevDict();

  G__cpp_setup_memfuncMRevDict();
  G__cpp_setup_globalMRevDict();
  G__cpp_setup_funcMRevDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMRevDict();
  return;
}
class G__cpp_setup_initMRevDict {
  public:
    G__cpp_setup_initMRevDict() { G__add_setup_func("MRevDict",(G__incsetup)(&G__cpp_setupMRevDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMRevDict() { G__remove_setup_func("MRevDict"); }
};
G__cpp_setup_initMRevDict G__cpp_setup_initializerMRevDict;

