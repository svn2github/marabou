#!/bin/sh

# Very Very Simple configure script.
#
# Authors: O.Schaile
#_____________________________________________________________________
guess_architecture() {
    # Try to guess the architecture of the host system
    # Note, that there's no attempt at guessing the compiler.
    # The `native' compiler is used in all cases.
    # If a user really want a specifific compiler, s/he better use the
    # first argument to do so.
    arch=`uname -s | tr '[A-Z]' '[a-z]'`
    chip=`uname -m | tr '[A-Z]' '[a-z]'`
    rele=`uname -r`
    echo "arch=$arch"
    echo "chip=$chip"
    echo "rele=$rele"
    case "$arch:$chip:$rele" in
        aix*)                  arch=aix5            ;;
        osf1*:alpha:*)         arch=alphacxx6       ;;
        freebsd*:*:[789]*)     arch=freebsd7        ;;
        freebsd*:*:6*)         arch=freebsd5        ;;
        freebsd*:*:5*)         arch=freebsd5        ;;
        freebsd*:*:4*)         arch=freebsd4        ;;
        freebsd*:*:*)          arch=freebsd         ;;
        hp-ux:ia64:*)          arch=hpuxia64acc     ;;
        hp-ux:*:*)             arch=hpuxacc         ;;
        hurd*:*:*)             arch=hurddeb         ;;
        linux:ia64:*)          arch=linuxia64gcc    ;;
        linux:x86_64:*)        arch=linuxx8664gcc   ;;
        linux:alpha:*)         arch=linuxalphagcc   ;;
        linux:arm*:*)          arch=linuxarm        ;;
        linux:hppa*:*)         arch=linux           ;;
        linux:mips:*)          arch=linuxmips       ;;
        linux:sparc*:*)        arch=linux           ;;
        linux:parisc*:*)       arch=linuxhppa       ;;
        linux:ppc64*:*)        arch=linuxppc64gcc   ;;
        linux:ppc*:*)          arch=linuxppcgcc     ;;
        linux:i*86:*)          arch=linux           ;;
        linux:s39*:*)          arch=linux           ;;
        openbsd*:*:*)          arch=openbsd         ;;
        lynx:*:*)              arch=lynxos          ;;
        darwin:power*:*)       arch=macosx          ;;
        darwin:*86*:*)         arch=macosx          ;;
        irix*:sgi*:*)          arch=sgicc           ;;
        sunos:sun*:6*)         arch=solarisCC5      ;;
        sunos:sun*:5*)         arch=solarisCC5      ;;
        sunos:sun*:4*)         arch=solaris         ;;
        sunos:i86pc:5*)        arch=solarisCC5      ;;
        cygwin_*:*86:*)        arch=win32           ;;
        cygwin_*:pentium:*)    arch=win32           ;;
        cygwin_*:ia64)         arch=win32           ;;
        mingw32_*:*86:*)       arch=win32           ;;
        *)
            echo "Attempts at guessing your architecture failed."
            echo "(triplet is $arch:$chip:$rele)"
            echo "Please specify the architecture as the first argument."
            echo "Do '$0 --help' for a list of available architectures."
            echo "Or file a bug at https://savannah.cern.ch/projects/savroot/"
            echo "including the full config.log and a dump of"
            echo "  touch dummy_file.c; gcc -E -dM dummy_file.c"
            exit 1
            ;;
    esac
    if [ "$arch" = "macosx" ]; then
       if [ `sw_vers | sed -n 's/ProductVersion://p' | cut -d . -f 2` -ge 5 ]; then
          if `sysctl machdep.cpu.extfeatures | grep "64" > /dev/null  2>&1` ; then
             arch=macosx64
          fi
       fi
    fi
    if [ "$arch" = "solarisCC5" -a "$chip" = "i86pc" ]; then
       if `isainfo -b | grep "64" > /dev/null  2>&1` ; then
          arch=solaris64CC5
       fi
    fi
    echo " Architecture set by guess_architecture: $arch"
}
##############################################################################################

if [ -z $INSTDIR ] ; then
   echo "WARNING, INSTDIR not defined"
   echo setting to: `pwd`
   INSTDIR=`pwd`
fi
if test $# -lt 1 ; then
   guess_architecture
else
   case $1 in
##      -h|--help) confhelp ; exit 0 ;;
      -*) # in case the first argument wasn't an architecure but an option
          guess_architecture
          ;;
       *) arch=$1
          echo " Architecture set to $arch by user"
          shift
          ;;
   esac
fi

# check that we got a valid architecture

ARCHS=config/ARCHS
if `awk '{ print $1 }' $ARCHS | grep "^$arch$" > /dev/null  2>&1` ; then
   echo "Configuring for $arch"
else
   echo "Invalid architecture. Try $0 --help"
   echo "Invalid architecture \"$arch\"."
   exit 1
fi

platform=`grep "^PLATFORM *=" config/Makefile.$arch | awk '{ print $3 }'`

MAKEIN=config/Makefile.in
MAKEOUT=config/Makefile.config

echo "ARCH           := $arch             " > $MAKEOUT
echo "USECONFIG      := FALSE             " >> $MAKEOUT

case $arch in
linuxx8664*)
   echo "Using linux x8664*"
   ;;
macosx*)
   if test "x$macosxvers" = "x"; then
      # get most recent SDK version
      macosxminor=`sw_vers | sed -n 's/ProductVersion://p' | cut -d . -f 2`
      macosxvers=10.$macosxminor
   fi
   # make available to conftest.mk scripts
   echo "EXPLICITLINK=yes">> $MAKEOUT
   echo "MACOSXVERS=$macosxvers">> $MAKEOUT
   ;;
esac

MAKEIN=config/Makefile.in
MAKEOUT=config/Makefile.config

echo "EXTRA_CFLAGS   := -Iinclude         " >> $MAKEOUT
echo "EXTRA_CXXFLAGS := -Iinclude         " >> $MAKEOUT
echo "EXTRA_LDFLAGS  :=                   " >> $MAKEOUT

echo "BINDIR         := $INSTDIR/bin"       >> $MAKEOUT
echo "LIBDIR         := $INSTDIR/lib"       >> $MAKEOUT
echo "OBJDIR         := $INSTDIR/obj"       >> $MAKEOUT
echo "INCDIR         := $INSTDIR/include"   >> $MAKEOUT
echo "ETCDIR         := $INSTDIR/etc"       >> $MAKEOUT
echo "DATADIR		   := $INSTDIR/data"      >> $MAKEOUT
echo "MACRODIR  	   := $INSTDIR/macros"    >> $MAKEOUT
echo "SRCDIR 		   := $INSTDIR/src"       >> $MAKEOUT
echo "ICONPATH  	   := $INSTDIR/icons"     >> $MAKEOUT
echo "DOCDIR 		   := $INSTDIR/doc"       >> $MAKEOUT
echo "TESTDIR		   := $INSTDIR/test"      >> $MAKEOUT
echo "TUTDIR 		   := $INSTDIR/tutorials" >> $MAKEOUT

echo "HTMLURL        := www.bl.physik.uni-muenchen.de" >> $MAKEOUT
echo "DISTURL        := www.bl.physik.uni-muenchen.de" >> $MAKEOUT

echo "INSTALL		   := cp -dpR            " >> $MAKEOUT
echo "INSTALLDATA    := cp -dpR            " >> $MAKEOUT
echo "INSTALLDIR	   := mkdir -p           " >> $MAKEOUT

echo "UPLOADHTML     := ncftpput -m -R -u rg \$(HTMLURL) /marabou html" >> $MAKEOUT
echo "UPLOADDIST     := ncftpput -m -u rg \$(DISTURL) /marabou" >> $MAKEOUT
