dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/allParam.h)
AM_CONFIG_HEADER(config.h)
AC_CONFIG_AUX_DIR(config)
AM_INIT_AUTOMAKE(allParam, 0.4)
AM_MAINTAINER_MODE

AC_CANONICAL_HOST

dnl Check features.
AC_ARG_ENABLE(param, [  --enable-param[=ARG]	make parameter library for given source, default ist "tcl"],,enable_param="tcl")
AC_ARG_ENABLE(server, [  --enable-server	in case of --enable-param=ca make parameter server instead of library, default is "no"],,enable_server="no")
AC_ARG_ENABLE(paramsrc, [  --enable-paramsrc[=ARG]	in case of --enable-server use parameter library for given source in this server, default is "tcl"],,enable_paramsrc="tcl")
AC_ARG_WITH(epics, [  --with-epics[=ARG]	in case of --enable-param=ca indicates the epics base directory],,with_epics="$EPICS_BASE")
AC_ARG_WITH(oracle, [  --with-oracle[=ARG]	in case of --enable-param=ora indicates the oracle home directory],,with_oracle="$ORACLE_HOME")


dnl Make primary definitions.
PAS=""
LIBCAPARAM=""
LIBFILEPARAM=""
LIBORAPARAM=""
LIBTCLPARAM=""
ALLPARAM_H="include/allParam.h"

if test "x$enable_param" != "xca"
then
	enable_server="no"
fi

if test "x$enable_param" = "xca"
then
	if test "x$enable_server" = "xyes"
	then
		PAS="pas"
		ALLPARAM_H=""
	else
		LIBCAPARAM_A="libcaParam.a"
	fi
elif test "x$enable_param" = "xfile"
then
	LIBFILEPARAM_A="libfileParam.a"
elif test "x$enable_param" = "xora"
then
	LIBORAPARAM_A="liboraParam.a"
elif test "x$enable_param" = "xtcl"
then
	LIBTCLPARAM_A="libtclParam.a"
fi

AC_SUBST(PAS)
AC_SUBST(LIBCAPARAM_A)
AC_SUBST(LIBFILEPARAM_A)
AC_SUBST(LIBORAPARAM_A)
AC_SUBST(LIBTCLPARAM_A)
AC_SUBST(ALLPARAM_H)


dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

if test "$GCC" = yes
then
    CC="$CC -ansi"
    CXX="$CXX -ansi"
	CFLAGS="-Wall -pedantic -g -O3 -fconserve-space -finline-functions"
	CXXFLAGS="-Wall -pedantic -g -O3 -fconserve-space -finline-functions"
fi

if test "x$enable_param" = "xora"
then
	if test -x "$with_oracle/bin/proc"
	then
		PROC="$with_oracle/bin/proc"
		ORA_USER="daq_oper/daqall@db-hades.gsi.de"
		PROCFLAGS="oraca=yes parse=partial sqlcheck=semantics \
			userid=$ORA_USER ireclen=130 oreclen=130"
		PROC_INCLUDES=""
	else
		AC_ERROR([Missing ProC/C++ Praecompiler])
	fi
	AC_SUBST(PROC)
	AC_SUBST(PROCFLAGS)
	AC_SUBST(PROC_INCLUDES)
fi

if test "x$enable_param" = "xca"
then
	if test -x "$with_epics/startup/HostArch"
	then
		epics_version="3_13"
		HOST_ARCH=$($with_epics/startup/HostArch)
	elif test -x "$with_epics/startup/EpicsHostArch"
	then
		epics_version="3_14"
		HOST_ARCH=$($with_epics/startup/EpicsHostArch)
	else
		AC_ERROR([Missing valid EPICS version])
	fi
	echo "setting EPICS version to $epics_version"
fi


dnl Checks for libraries.
LIBS="-L/usr/local/lib -L$HOME/$host/lib $LIBS"
if test "x$enable_server" = "xyes"
then
	AC_SEARCH_LIBS(getprotobyname, netinet)
	AC_SEARCH_LIBS(syslog, netinet)
	AC_CHECK_LIB(compat, SYSLOG_syslog)

	if test "x$epics_version" = "x3_13"
	then
		LIBS="-L$with_epics/lib/$HOST_ARCH $LIBS"
	elif test "x$epics_version" = "x3_14"
	then
		LIBS="-L$with_epics/lib/$EPICS_HOST_ARCH $LIBS"
	fi
	AC_CHECK_LIB(Com, osiSleep)
	AC_CHECK_LIB(ca, ca_array_get,,[LIBS="-lca $LIBS"])
	AC_CHECK_LIB(gdd, gdd,,[LIBS="-lgdd $LIBS"])
	AC_CHECK_LIB(cas, fileDescriptorManager,,[LIBS="-lcas $LIBS"])
fi
if test "x$enable_paramsrc" = "xca"
then
	if test "x$epics_version" = "x3_13"
	then
		LIBS="-L$with_epics/lib/$HOST_ARCH $LIBS"
	elif test "x$epics_version" = "x3_14"
	then
		LIBS="-L$with_epics/lib/$EPICS_HOST_ARCH $LIBS"
	fi
	AC_CHECK_LIB(Com, osiSleep)
	AC_CHECK_LIB(ca, ca_array_get,,[LIBS="-lca $LIBS"])
	AC_CHECK_LIB(caParam, conSetupParam)
elif test "x$enable_paramsrc" = "xfile"
then
	AC_CHECK_LIB(fileParam, conSetupParam)
elif test "x$enable_paramsrc" = "xora"
then
	LIBS="-L$with_oracle/lib $LIBS"
	AC_SEARCH_LIBS(sqlorat, clntsh)
	AC_SEARCH_LIBS(sqlcxt, clntsh)
	AC_CHECK_LIB(oraParam, conSetupParam)
elif test "x$enable_paramsrc" = "xtcl"
then
	AC_SEARCH_LIBS(Tcl_CreateInterp, tcl tcl8.3 tcl8.2 tcl8.0 tcl7.4)
	AC_CHECK_LIB(tclParam, conSetupParam)
fi


dnl Checks for header files.
CPPFLAGS="-I/usr/local/include -I$HOME/include $CPPFLAGS"

AC_HEADER_STDC
AC_CHECK_HEADERS(syslog.h,,AC_ERROR([Missing system header file(s)]))

if test "x$enable_param" = "xca"
then
	if test "x$epics_version" = "x3_13"
	then
		CPPFLAGS="-I$with_epics/include -I$with_epics/include/os/$HOST_ARCH $CPPFLAGS"
	elif test "x$epics_version" = "x3_14"
	then
		CPPFLAGS="-I$with_epics/include -I$with_epics/include/os/$EPICS_HOST_ARCH $CPPFLAGS"
	fi
	AC_CHECK_HEADER(tcl.h,,AC_ERROR([Missing header file]))
	AC_TRY_CPP([#include <cadef.h>],
		[echo "checking for cadef.h... yes"],
		[echo "checking for cadef.h... no"; AC_ERROR([Missing header file])])
elif test "x$enable_param" = "xora"
then
	CPPFLAGS="-I$with_oracle/precomp/public $CPPFLAGS"
	CPPFLAGS="-I$with_oracle/precomp/public $CPPFLAGS"
	AC_TRY_CPP([#include <oraca.h>],
		[echo "checking for oraca.h... yes"],
		[echo "checking for oraca.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <sqlca.h>],
		[echo "checking for sqlca.h... yes"],
		[echo "checking for sqlca.h... no"; AC_ERROR([Missing header file])])
elif test "x$enable_param" = "xtcl"
then
	AC_CHECK_HEADER(tcl.h,,AC_ERROR([Missing header file]))
fi

if test "x$enable_server" = "xyes"
then
	AC_CHECK_HEADER(allParam.h,,AC_ERROR([Missing header file]))
	AC_TRY_CPP([#include <aitTypes.h>],
		[echo "checking for aitTypes.h... yes"],
		[echo "checking for aitTypes.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <aitHelpers.h>],
		[echo "checking for aitHelpers.h... yes"],
		[echo "checking for aitHelpers.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <casdef.h>],
		[echo "checking for casdef.h... yes"],
		[echo "checking for casdef.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <fdManager.h>],
		[echo "checking for fdManager.h... yes"],
		[echo "checking for fdManager.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <gdd.h>],
		[echo "checking for gdd.h... yes"],
		[echo "checking for gdd.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <gddApps.h>],
		[echo "checking for gddApps.h... yes"],
		[echo "checking for gddApps.h... no"; AC_ERROR([Missing header file])])
	AC_TRY_CPP([#include <gddAppFuncTable.h>],
		[echo "checking for gddAppFuncTable.h... yes"],
		[echo "checking for gddAppFuncTable.h... no"; AC_ERROR([Missing header file])])
	if test "x$with_epics" = "x3_13"
	then
		AC_TRY_CPP([#include <osiTimer.h>],
			[echo "checking for osiTimer.h... yes"],
			[echo "checking for osiTimer.h... no"; AC_ERROR([Missing header file])])
	elif test "x$with_epics" = "x3_14"
	then
		AC_TRY_CPP([#include <epicsTimer.h>],
			[echo "checking for epicsTimer.h... yes"],
			[echo "checking for epicsTimer.h... no"; AC_ERROR([Missing header file])])
	fi
fi


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T


dnl Checks for library functions.
AC_CHECK_FUNCS(select strerror strtoul uname)

AC_OUTPUT(Makefile examples/Makefile)

