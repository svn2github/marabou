{\rtf1\ansi\ansicpg1252\uc1 \deff7\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f92\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Monaco;}{\f95\froman\fcharset238\fprq2 Times New Roman CE;}{\f96\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f98\froman\fcharset161\fprq2 Times New Roman Greek;}{\f99\froman\fcharset162\fprq2 Times New Roman Tur;}{\f100\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f101\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f102\froman\fcharset186\fprq2 Times New Roman Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red51\green0\blue20;\red64\green110\blue255;\red0\green0\blue212;}
{\stylesheet{\ql \li0\ri720\nowidctlpar\faauto\rin720\lin0\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar
\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 Topic;}{\s16\ql \li260\ri-720\nowidctlpar\tx540\tx820\tx1080\tx1360\tx4320\tx5760\faauto\rin-720\lin260\itap0 
\f92\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 Code;}{\s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 
Subtopic;}{\s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext18 TopicBody;}{\s19\ql \fi-1000\li1260\ri0\nowidctlpar\faauto\rin0\lin1260\itap0 
\f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext19 SeeAlso;}{\s20\ql \fi-1540\li1800\ri0\nowidctlpar\faauto\rin0\lin1800\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext20 RelatedTopics;}{
\s21\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs28\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext21 Subtopic1;}{\s22\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 
\b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext22 Topic1;}{\s23\ql \li0\ri720\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin720\lin0\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext23 header;}{
\s24\ql \li0\ri720\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin720\lin0\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 footer;}}{\info{\author Jack Harris}{\operator Jack Harris}{\creatim\yr2002\mo3\dy20\hr14\min45}
{\revtim\yr2002\mo3\dy20\hr14\min46}{\printim\yr2002\mo3\dy20\hr14\min46}{\version3}{\edmins1}{\nofpages17}{\nofwords7846}{\nofchars44727}{\*\company XIA}{\nofcharsws54927}{\vern8247}}\margl1440\margr1440\margt1080\margb1080 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \linex0\sectdefaultcl 
{\header \pard\plain \s15\ql \li0\ri0\nowidctlpar\tqc\tx4680\tqr\tx9340\faauto\rin0\lin0\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\b0\fs20\ulnone date}}{\fldrslt {
\b0\fs20\ulnone\lang1024\langfe1024\noproof 3/20/2002}}}{\b0\fs20\ulnone \tab \tab \chpgn 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 
\f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 RunControlPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
After starting the Viewer by double clicking on a previously saved experiment configuration file, the RunControl panel should be prominently displayed in the middle of the desktop. (In case it is not visible:
 watch the menu bar at the top of the screen, point the cursor at the "XIA" pull-down menu and click "DGF4C". As a result, the RunControl panel will come up.) This panel is the main command center to interact with the DGF-4C modules. It is organized into 
5 rows of gray action buttons labeled "Edit Settings", "Data base", etc. The buttons are arranged in logical order, essentially from left to right and top to bottom. 
\par For most of the actions the DGF-Viewer interacts with one DGF-4C module at a time. The num
ber of that module is displayed at the very top of the RunControl panel (inside a "Select Module" control). The "Selected Module" is the target for all actions executed from the Viewer. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Action Buttons:
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2520\faauto\rin720\lin260\itap0 {[System]\tab \tab }{\ul\cf2 SetupPanel
\par }{\cf1 [Files]\tab \tab }{\ul\cf2 SetFilesPanel}{\cf1  
\par [Module]\tab \tab }{\ul\cf2 InstrumentPanel}{\cf1  
\par [Tau]         \tab \tab }{\ul\cf2 TauDisplay}{\cf1   
\par [DCDisplay]\tab \tab }{\ul\cf2 DCDisplay}{\cf1   
\par [Start]\tab \tab }{\ul\cf2 RunPanel}{\cf1  
\par [Statistics]\tab \tab }{\ul\cf2 RunStatsPanel}{\cf1  
\par [Events]\tab \tab }{\ul\cf2 EventDisplay}{\cf1  
\par [MCA]\tab \tab }{\ul\cf2 MCADisplay}{\cf1  
\par [Spectrum]\tab \tab }{\ul\cf2 SpectrumDisplay}{\cf1  
\par 
\par [Offsets]\tab \tab see }{\ul\cf2 Offset
\par }{\cf1 [Save], [Read], [Apply] \tab see }{\ul\cf2 Parameter Data Base
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 {
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 SetupPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [System]
\par 
\par On start up, IGOR comes up in exactly the same state as it was when last saved to file using File->Save Experiment. This does not imply however that the DGF-4C module settings have been restored, if t
he CAMAC crate has been powered down in the meantime.  On cycling power the DGF-4C lose all programming.  This includes the FPGA configuration, the DSP program, and all module parameters.  In order to restore the situation prior to the shut down all confi
gurations, programs and parameters have to be downloaded again.  This is done from the SetupPanel. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Edit CAMAC Slots
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
If you are configuring a new setup, you have to enter the number of DGF-4Cs in the system in the line entitled "Number of DGF-4C modules".  The spreadsheet that opened at the same time as the SetupPanel shows 4 columns describing the crate setup. 
\par The left-hand column entitled "Point" shows the module identifying numbers. 
\par The second column shows the CAMAC slots in which the modules reside. M
odule numbering starts at 1. Do not change the entry for row 0, which must be 24. The value 24 is a CAMAC broadcast address. It must be 24 even for mini crates with fewer than 25 slots.  
\par The third column gives the name of the FPGA configuration file to be
 used with each module.  By default the Viewer assigns every module the same FPGA configuration, but you can edit this and enter different file names for different modules. In systems with both Revision D and Revision E modules, the files will be updated 
at startup according to the revision from the files specified in the }{\ul\cf2 SetFilesPanel}{\cf1  
\par In the fourth row, enter the serial number of the module(s). This is used only for Revision D modules (serial number 1100 through 1199); enter zero for Revision C or Revision E modules. 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Controller Options
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
You can select your type of CAMAC controller using the "Choose Controller" popup menu. Choices include the Wiener CC32 controller (select "CC32") and the Jorway 73A controller (select J73A). For offline analysis without m
odules attached, select "None" - this will suppress all I/O error messages. Depending on the chosen Controller, you can select several options and parameters. 
\par 
\par For the Jorway 73A, you have to select the proper  SCSI bus number and Crate ID.  The latter mu
st equal the number on the front panel dial of the Jorway 73A controller.  The SCSI ID has to be determined experimentally.  It usually is either 0 or 1.  The range it may span is 0 through 7.  If it is unknown, set it to 0, and click [I/O check].  If the
 system returns immediately with an error message the SCSI bus number is wrong, and there was no communication with the DGF-4C modules.  Increment by 1 and try again, until you get to see a message saying "Your system works fine. [...]". 
\par 
\par For the Wiener CC32, you only have to select the crate number. 
\par 
\par In case the main controller can handle Look-At-Me signals (LAMs) check the box "Raise LAMs at the end of a run". The DGF-4Cs can raise a LAM when run data are available to support interrupt driven data read o
ut.  Leave this box unchecked if the CAMAC controller used for data read out cannot send an interrupt to the data acquisition host. The Jorway 73A falls into that category.  Alternatively the host could poll for LAMs.
\par 
\par The checkbox "IGOR talks to master co
ntroller" is used when the Jorway controller is the master controller in the CAMAC crate.  When checked the Viewer will broadcast certain commands to all DGF-4Cs in the system.  As of this writing this is a broadcast to all stations in the crate.  Thus th
is feature may be used only if there are no other modules besides the J73A and the DGFs in the crate. 
\par 
\par If the checkbox "Fast CAMAC option" is checked, the viewer also tests if the CAMAC controller supports fast CAMAC Level-1 when clicking on [I/O check]. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Start/Restore System
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
After you are done setting up the CAMAC slots and controller options, click the "Start up" button.  The spinning wheel in the lower left-hand corner of the screen will keep spinning for as long as IGOR is busy downloading settings int
o DGF-4C modules.  When done, the DSPs have received their programs, and the trigger/filter FPGAs have been configured. Furthermore, the parameter values have been read from the settings file specified the }{\ul\cf2 SetFilesPanel}{\cf1 , stored in the }{
\ul\cf2 parameter data base}{\cf1  and downloaded to the modules.  . 
\par 
\par Check the box "Load new DSP code" prior to startup if you want to use new DSP code specified in the }{\ul\cf2 SetFilesPanel}{\cf1 .  If the box is left unchecked, the DGF-Viewer will download the DSP code from memory.
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 SetFilesPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Files]
\par 
\par The }{\ul\cf2 SetFilesPanel}{\cf1   gives you access to paths and files currently in use; grouped into three sections, one for each directory path. 
\par 
\par The directory locations are specified as four complete (not relative) search paths: the Data Path
 for the data and settings files; the Calibration Path for ADC calibration files (applies to Revision D modules only); the DSP Path for the DSP code; and the FPGA Path for the FPGA configuration files. Use a colon (:) as the separator between drive name, 
directory, and subdirectories. Do not use backslashes (\\). For example use "D:XIA:data" rather than "D:\\XIA\\data". 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Data Files
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The data path points to the directory into which all data files are written.  The most recently used }
{\ul\cf2 Run data file}{\cf1  is also displayed here, and you can edit this field to select another one.  The settings file is the file that contains the }{\ul\cf2 parameter data base}{\cf1 
 of all parameter values.  You can edit this field to select a different DGF-4C setup.  
\par 
\par Together with every run, the Viewer writes a copy of the data base to file.  The copy has the same name as the current run data file but the extension is "itx" rather than "bin".  If you want to view data from an older run in the }{\ul\cf2 EventDisplay}{
\cf1 , set the Settings file equal to the data base copy file of this particular run (e.g. "oldrun.itx"), and the Run data file to the data file (e.g. "oldrun.bin"). Then go to the }{\ul\cf2 RunControlPanel}{\cf1 
, click on [Read] to load the settings and on [Events] to open the }{\ul\cf2 EventDisplay}{\cf1 .
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Calibration Files
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Revision D modul
es (serial numbers 1100 to 1199) have an individual calibration file associated with them. These files have to reside in the folder specified by the Calibration Path. Revision C and Revision E modules do not need calibration files, but the path should sti
ll point to a valid folder.
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {DSP files
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The DSP code is stored in the DSP path together with some support information which the Viewer needs to navigate the DSP memory space.  Most likely the DSP code file name will be dgfcode.exe.  However, if you should r
eceive custom code from XIA this is the place to tell the Viewer. 
\par If you check the box "Load new DSP code"  in the }{\ul\cf2 SetupPanel}{\cf1 , this is the file that will be read and downloaded to the modules.  If the box is left unchecked, the DGF-Viewer will download the DSP code currently in memory.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {FPGA files
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The DGF-4Cs are shipped with a number of trigger/filter FPGA configuration files, which are placed in their own directory.  The FPGA configuration file can be edited to select the desired configuration.  When thi
s field is edited, the Viewer assigns this configuration to every module in the system, overwriting any manual editing in the SlotView spreadsheet (}{\ul\cf2 Edit CAMAC Slots}{\cf1 )
\par The "System configuration file" contains the configuration of the System FPGA for Revision D and Revision E modules, which among other functions acts as a controller for the DSP and FireWire chips. For Revision C modules, this file name is ignored.
\par To support mixed systems of Revision D and Revision E modules, two trigger/filter FPGA files can be specified. At startup, the Viewer reads the hardware information from each module and assigns the corresponding file.
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 InstrumentPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Module]
\par 
\par Through the Instrument Panel the user can edit almost all parameters that control the operation of the DGF-4C.}{\cf17  }{\cf1 
Most settings are changed on a channel-by-channel basis. The only exceptions are the module control/status register ModCSRA, and the coincidence 
pattern, which affect the module as a whole.  The selected module and channel are shown at the top of the panel.  
\par 
\par Making changes affects only the values in the }{\ul\cf2 parameter data base}{\cf1 , until you hit the "Apply" button. Pressing the "Apply" button stores the 
new settings in the data base, downloads the DAC values into the DSP memory, then calls a DGF-4C procedure to reprogram the DACs.  Pressing the "Close" button exits the panel without any further action. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Energy and Trigger Filter
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {In this section you can s
et the peaking and flattop times for the energy and trigger filter of each channel.  The units of time are }{\f3 \'6d}{s.  As explained in the user's manual, we use three different FPGA configurations to cover energy fi
lter times from 25ns to 11.2ms.  The configurations use averaging of the ADC data and then operate the same filter core at a decimated (i.e. reduced) clock rate.  As a result, there is a granularity of 0.100}{\f3 \'6d}{
s for 2-bit (times 4) decimation, 0.400}{\f3 \'6d}{s for 4-bit (times 16) decimation and 1.600}{\f3 \'6d}{
s for 6-bit (times 64) decimation, corresponding to one cycle of the decimated clock.  The Viewer knows which decimation has been loaded, and adjusts the parameters you typed in accordingly. 
\par 
\par Employing a trapezoidal fil
ter avoids the kind of ballistic deficit that occurs when a finite rise time signal is used in conjunction with a Gaussian shaper.  The flattop or gap time should thus be a little larger than the longest rise time expected.  The output of the energy filte
r
 is sampled one decimated clock cycle before the end of the gap time, plus the signal arrival may jitter by up to one decimated clock cycle with respect to the decimated clock. You should therefore make the gap time  two notches longer than the signal ris
e time. 
\par The sum of peaking time and gap time cannot exceed 31 decimated clock periods.  If you type in a peaking time value that violates this bound, the Viewer will shorten the gap time to meet the specs.  Entering a gap time gives this parameter priority
 and it can be expanded at the expense of peaking time.  
\par 
\par The trigger filter is always operated at the ADC sampling rate.  Its peaking time can be varied only between 25ns and 775s.  Its gap however can expand to 32*25ns=800ns.  The trigger filter will mo
st often use a gap time comparable with the average signal rise time. In applications with very short rise times a gap time of zero will give the best pileup rejection performance. 
\par The trigger threshold can be set in units of ADC steps.  You can get an idea of what the noise in your system is by looking at the trace acquired in the }{\ul\cf2 TauDisplay}{\cf1 , or by opening the }{\ul\cf2 DCdisplay}{\cf1  (click [DCdisplay] in the }{
\ul\cf2 RunControlPanel}{\cf1  )and hitting the refresh button.  Use the mouse to zoom in on parts of the displayed trace(s) and estimate the noise.
\par 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Gain and Offset
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
In the Gain and Offset section you can set the digital to analog converters (DACs) in the selected channel and module.  There are two DACs per channel. One controls the gain of the analog amplifier stage preceding 
the waveform digitizing ADC. The other controls the DC-}{\ul\cf2 offset}{\cf1  that is subtracted from the input signal to bring it into the ADC range. Note that the ADCs are dc-coupled to the DGF-4C inputs, and thus compensation for any DC-}{\ul\cf2 
offset}{\cf1  is necessary.   You will rarely have to set this manually, as the DC-}{\ul\cf2 offset}{\cf1 s can be adjusted automatically through }{\ul\cf2 RunControlPanel}{\cf1 [Offsets].  }{\cf17 The DAC settings are given in units of }{\cf1 
V/V and Volt, respectively.  The calibration is correct only if 50 Ohm input impedance is chosen.  T
he voltage gain computed is the ratio between the pulse height at the module input to the pulse height at the ADC input. Note that the ADC has a 1V input range, which is mapped onto integers from 0 to 16k.  At 604 Ohm input impedance the gain is higher th
an the computed one by approximately 10%.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Pulse Shape Analysis
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The trace and delay values to be entered here, both in units of }{\f3 \'6d}{
s, govern the waveform acquisition.  Especially if you request pulse shape analysis these two parameters have to be set correctly.  To check the settings, acquire a small number of events and view these in the }{\ul\cf2 EventDisplay}{\cf1  by pressing }{
\ul\cf2 RunControlPanel}{\cf1 [Events]. Use the delay parameter to move the trace.  Delay measures the trigger time with respect to the begin of the recorded trace.
 For ordinary data taking the trace lengths are limited to below 25.600ms.  The waveforms will be read in 25ns increments from FIFO memory.  
\par 
\par Longer traces are recorded through a different mechanism.  In that case the DSP continuously reads an FPGA regist
er which mirrors the ever-changing ADC data.  The rising edge of the signal will be missing in that case, as the DSP starts recording these long traces only after a peaking plus flattop time plus 2 decimated clock cycles.  If you limit the readout to one 
channel in a module, the long traces can extend to slightly beyond 610ms.  If more channels need to be read, the maximum length reduces as they all must fit into the available data buffer. 
\par  
\par see also: }{\ul\cf2 RemindCoincWait
\par }{\cf18 
\par }{\cf1  
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {On board MCA
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The MCA section shows the parameters controlling the operation of the multichannel analyzer built into the DSP memory.  Energy values are reported as 16-bit fixed-point numbers.  
\par 
\par In Revision C modules, the scaling is such that the LSB corresponds to 1/16
th of an ADC step (12bit ADC).  The MCA memory is limited to 8192 words.  It can all be used for one channel or be shared equally among 2 or 4 channels.  If you want to map the full energy range into the available MCA memory, you have to combine bins; at 
least 2^3 bins for a single channel spectrum.  One "bin" means 1 LSB of the energy word.  
\par 
\par In Revision D modules, the scaling is such that the LSB corresponds to 1/16th of an ADC step (12bit ADC). Spectra are stored in the extended memory of 32768 words for each channel. To see the full energy range, you have to combine at least 2^1 bins. 

\par 
\par In Revision E modules, the scaling is such that the LSB corresponds to 1/4th of an ADC step (14bit ADC). Spectra are stored in the extended memory of 32768 words for each channel. To see the full energy range, you have to combine at least 2^1 bins. 

\par   
\par If you want to see a certain range of the spectrum at higher resolution you can enter a minimum energy in the line "Energy min =" and reduce the number of bins that have to be combined. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Action Buttons
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2340\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {[Close] \tab \tab closes the panel without further action. 
\par [Apply] \tab \tab downloads the new values to the selected module and activates them by \tab \tab \tab calling the necessary DSP functions. 
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2340\tx4320\faauto\rin720\lin260\itap0 {
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2340\faauto\rin720\lin260\itap0 {[Edit]  MCSRA\tab }{\ul\cf2 MCSRAEditPanel
\par }{\cf1 [Edit]  CCSRA\tab }{\ul\cf2 CCSRAEditPanel
\par }{\cf1 [Edit]  Coinc. pattern\tab }{\ul\cf2 HitEditPanel
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2340\tx4320\faauto\rin720\lin260\itap0 {
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx2340\faauto\rin720\lin260\itap0 {[Advanced]\tab \tab }{\ul\cf2 FippiPanel}{\cf1  
\par [Copy] \tab \tab }{\ul\cf2 CopyPanel
\par }\pard \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 {
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 MCSRAEditPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 InstrumentPanel}{\cf1 [Module CSRA Edit]
\par In the Module control/status register (MCSRA) options are set that affect the module as a whole.
\par  
\par Bit 0 is unused in the current software revision (2.30), but reseverd for compatibility with earlier revisions. It used to specify the event processing buffer, but now this control is incorporated in the run type number.
\par 
\par Bits 10 and 13 are used to provide termination for external triggers from the backplane bus connector. Even pins on the connector should be connected to the corresponding odd pins on the neighboring module to the right (as seen from the front). 
\par Setting Bit 10 (DSP Trigger Termination) ter
minates the DSP trigger line with 50 Ohm. This bit should be set for a module at the end of the trigger bus (thus also for a module operated individually). Bit 13 (Fast Trigger Termination) terminates the fast trigger line, and should be set for a module 
at the end of the trigger bus (or for a module operated individually) 
\par 
\par Any changes in bits 10 and 13 will be applied to the module when you click the check boxes. At startup, the bits are set according to the parameter file. 
\par 
\par Note: Bits 10 and 13 are stored in the DSP memory but do not affect the operation of the DSP. They have to be written to the Interface FPGA with a "writeICSR" command to become effective.
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 CCSRAEditPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 InstrumentPanel}{\cf1 [Channel CSRA Edit]
\par Each channel has its own channel control/status register.  Click a check box to set or clear particular bits.  We give a brief description of all relevant bits here.  In the }{\ul\cf2 CCSRAeditPanel}{\cf1  they appear in top to bottom order. 
\par 
\par Once you are done editing the channel's control/status register, close the }{\ul\cf2 CCSRAeditPanel}{\cf1 .  The values have been written to the data base when you clicked on the check boxes. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 0: Group trigger mode
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
This bit controls waveform acquisition.  To stop the FIFO and store a waveform two conditions must be fulfilled.  A fast t
rigger primes the FIFO to stop after a programmed delay, but only if by that time a valid trigger is recorded.  When bit 0 is cleared the source for that valid trigger is the locally generated event trigger of this channel.  When bit 0 is set, the trigger
 source will be a signal on the distributed DSP-trigger line.  This allows for master slave operation as outlined in the user's manual in the examples section. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 1: Measure individual live time
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This bit will in almost all applications be opposite to bit
 0.  Its setting decides who asserts the live time control.  When cleared, the DSP ensures that during the event interrupt no channel can generate another trigger and latch new event data, at least not after the coincidence time window, see }{\ul\cf2 
HitEditPanel}{\cf1  below. This setting is useful in master slave operation, and almost in all cases where list-mode data are required.  
\par On the other hand, when channels are operating independently and only MCA information is needed (}{\ul\cf2 MCA mode}{\cf1 ), but not }{\ul\cf2 list mode}{\cf1  data, then this bit should be set to achieve the highest throughput.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 2: Good channel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Only channels flagged as good will be read out. This setting has no bearing on the channel's capability to issue a trigger.  There can be a triggering channel whose data are discarded. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 3: Read always
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Set this bit if you want a good channel to be read out even if it did not report a hit.  It cannot report valid energy or timing data in that case, but if operated in group trigger mode you will get a valid waveform.  This way you
 can collect waveforms not biased by trigger requirements. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 4: Enable trigger
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 { You can switch on any channel's ability to contribute to the event trigger with this bit. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 5: Trigger positive
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
For channels with triggering enabled, this causes triggering on the rising edge of the input signal when the bit is set, and triggering on the falling edge when the bit is not set.  The core of the trigger/filter FPGA can only trigger on a rising edge.  S
o, if the bit is not set the FPGA will invert the signal before storing it in the FIFO and sending it to the core.  This is why triggered traces in the }{\ul\cf2 TauDisplay}{\cf1  always show up as positive signals. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 6: GFLT required
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {In a larger experiment you may want
 to exercise control over which events to accept and which to reject in a way that takes into account multiplicity information from many modules and possibly signals from other devices as well. The external logic may be fast enough to make a trigger decis
i
on within an energy filter peaking time.  If so, it should send out a pulse that is logic 1 (NIM levels, 1=-0.8V) during the time when the channel would latch data and generate a trigger, which happens no earlier than one peaking time and no later than   
peaking time + gap time + 2 decimated-clock cycles after event arrival.  
\par When bit 6 is set the channel requires the presence of a global first level trigger (GFLT) to latch data and issue a trigger.
\par   
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 7: Histogram energies
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Switch on incrementing an en
ergy histogram in the DSP's MCA memory with this bit.  You can choose to have histogramming in }{\ul\cf2 list mode}{\cf1  runs.  The histograms will continue to be updated over multiple runs, started with the resume run command. 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 9: Correct for ballistic deficit
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Whil
e the trapezoidal energy filter avoids the ballistic deficit that occurs in a Gaussian shaper when the signal rise time is finite, there is still ballistic deficit in the preamplifier due to its exponentially decaying output signal.  XIA uses a patented c
orrection for this effect, which is switched on by setting this bit.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 10: Compute constant fraction time
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The DSP can use pulse shape analysis to compute a precise signal arrival time using the digital equivalent of a constant fraction discriminator.  Fo
r this to work correctly the rising part of the signal should be fully contained in the recorded trace.  The time computed is the arrival time after the start of the acquired waveform in units of 1/256th of an ADC sampling interval.  This information can 
be used to replace the recorded channel time which is derived from a (digital) leading edge discriminator, cf user's manual.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Bit 15: Bipolar
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The setting of this bit controls the automatic }{\ul\cf2 offset}{\cf1 
 adjustment.  For unipolar signals (bipolar bit = 0, box not checked) the channel's }{\ul\cf2 offset}{\cf1 
 is adjusted such that the DC value as measured by the waveform digitizing ADC will be 400 steps out of its 4095 steps.  For bipolar signals which may have equal-sized excursions in both directions the DC value is adjusted such 
that the baseline trace falls into the center of the ADC range, i.e. is measured to be 2048. 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Threshold
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf17 
The DSP code shipped with the DGF-4C has some pulse shape analysis capabilities already built in.  One of these functions, the digital constant fractio
n discriminator takes an input parameter---the threshold fraction.  By setting n to 1,2,3, etc you choose a threshold of 1/2, 1/4, 1/8, etc.  The default value is n=2, since 25% is a commonly used threshold fraction for this type of discriminator.  The re
sult of the computation is the time of signal arrival measured with respect to the start of the acquired waveform.  The result is written into the channel header in the linear output data buffer, cf the user's manual for details. 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf17 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 HitEditPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 InstrumentPanel}{\cf1 [Coinc. pattern Edit]
\par 
\par The third bit mask in the }{\ul\cf2 InstrumentPanel}{\cf1  is the coincidence pattern. This mask is useful for DGF-4C }{\cf17 channels}{\cf1  operating independently from each other, though they may be sharing clocks and triggers.  With this
 mask you may require that an event as witnessed by an individual channel match any of the preset hit patterns to be accepted by the DSP.  
\par 
\par An example shall illustrate this feature.  Assume a single module connected to 4 detectors which observe a Na-22 so
urce, emitting back to back 511keV-gs from positron annihilation.  Channels 0 and 1 are connected to one pair of back to back detectors and channels 2 and 3 are connected to a second pair of back to back detectors.  You are interested only in gammas from 
p
ositron annihilation.  Thus a coincidence in channel 0 and 1 or a coincidence in channel 2 and 3 is required.  If all 4 channels were in coincidence, that would be fine too.  So, the acceptable hit patterns would be (0,0,1,1), (1,1,0,0) and (1,1,1,1), whe
re the right most digit indicates channel 0 and the left most is for channel 3.  To achieve the desired behavior, you have to select the three acceptable hit patterns in the }{\ul\cf2 HitEditPanel}{\cf1 
 by checking the appropriate boxes, and deselect all other hit patterns by not checking their boxes.  
\par  
\par In general, with 4 channels there are 16 distinct possible hit patterns, and you can select any combination of these to be a valid event.  If you want to disable this feature, you should check all boxes in the }{\ul\cf2 HitEditPanel}{\cf1 
, i.e. accept any hit pattern. 
\par 
\par You can set the width of the coincidence window (in 25ns ticks) in the space at the bottom of the panel. Its minimum value depends on a number of variables, such as the delay time set in the 
\par }{\ul\cf2 Pulse Shape Analysis}{\cf1  section of the }{\ul\cf2 InstrumentPanel}{\cf1 . 
\par }{\cf18 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 RemindCoincWait
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The }{\ul\cf2 RemindCoincWait}{\cf1 
 panel serves to inform the user of a dependency between variables. 
\par 
\par A delay time set in the }{\ul\cf2 Pulse Shape Analysis}{\cf1  section of the }{\ul\cf2 InstrumentPanel}{\cf1  increases the overall event time. Consequently,
 the width of the coincidence window has to be adjusted to accommodate the full event. Usually, this is done automatically by the DGF Viewer and there is no need to edit the }{\ul\cf2 HitEditPanel}{\cf1  manually.
\par 
\par On the other hand, if the delay time is decreased, a small
er coincidence window is possible. This would reduce data processing time and allow for a higher event rate. However, to avoid overwriting a large coincidence window intentionally set by the user, the value is not adjusted automatically. Instead, the }{
\ul\cf2 RemindCoincWait}{\cf1  panel appears, giving the user a choice of buttons for either keeping the current width of the coincidence window, or for setting it to the new (smaller) minimum required width.
\par 
\par If you want to set an entirely new value, click on the button labeled "New". This will open the }{\ul\cf2 HitEditPanel}{\cf1 . You can set the width of the coincidence window (in 25ns ticks) in the space at the bottom of the panel. 
\par 
\par If you ignore the }{\ul\cf2 RemindCoincWait}{\cf1  panel or close it without clicking a button, the width of the coincidence window will be unchanged. 
\par 
\par  
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 FippiPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 InstrumentPanel}{\cf1 [Advanced] 
\par In this panel, the trigger/filter FPGA parameters are shown in their pure numerical forms.  This section is of interest for specialty applications and fine-tuning of some operations.  Consult the programmer's manual for details. 
\par 
\par The variable FTPwidth controls the width of the fast trigger pulse that this channel sends to the multiplicity unit. The default is 8, which translates to 8*25ns=200ns.  The maximum allowed value is 256, which corresponds to 6.4ms. 
\par 
\par The variable MaxWidth can be used to fine-tune the pileup rejection.  By default MaxWidth is zero, which disables the function associated with it. A non-zero value (1..255) requires that for an event to 
be considered valid the output from the fast trigger filter be above threshold for  not longer than the given number of 25ns sampling clock ticks.  This feature essentially applies a rise time cut, and rejects signals with too long a rise time.  Two pulse
s
 in rapid succession may appear to the fast filter as really being one, too long, pulse.  Using Maxwidth this kind of pileup can be rejected.  To tune this cut, begin with large values and observe the count rate under a peak in a spectrum.  Then reduce Ma
xWidth until you start losing efficiency in the main peak.  This will give excellent pileup rejection.  As a guideline, you will find that MaxWidth*25ns = rise time + 2*trigger filter peaking time + gap time will give good results.
\par 
\par The parameter called Ave
raging controls the averaging of baseline measurement.  The DGF-4C measures the DC-offset of each channel continuously, and averages consecutive measurements to improve the pulse height resolution.  A value  n corresponds to averaging over 2n DC-offset me
asurements.  At low count rates, n=2..4 will give the best results. 
\par Noise or small events below the energy threshold may contaminate baseline measurements.  In such a case, the average is reset. As the count rate is increased, contamination happens more fr
equently, effectively lowering the averaging value. Since higher count rates require less averaging anyway, the averaging parameter is thus effectively self-adjusting. 
\par 
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 CopyPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 InstrumentPanel}{\cf1 [Copy] 
\par This panel can be used to copy parameter setti
ngs from one module to another. The source module and channel are selected at the top of the panel.  The parameters to be copied are organized into functional blocks in the left-hand column.  The second column shows the destination channels and the third 
and fourth column show the destination modules for the copy operation.   Move the mouse over any checkbox in the first column to see exactly which variables are being copied. The information is displayed in the bottom comment bar of the IGOR screen.  

\par 
\par After selecting source, destination and parameters, click on the "Copy" button to execute the copy operation. 
\par 
\par Note: If you made changes in the }{\ul\cf2 InstrumentPanel}{\cf1  you have to click }{\ul\cf2 InstrumentPanel}{\cf1 [Apply] first before the Copy operation will work satisfactorily.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf17 Extract
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf17 
Clicking on the "Extract" button opens a panel that allows the parameter values to be extracted from a file instead from the current module. The source file is specified at the top of the panel. Its directory is given by the data path in the }{\ul\cf2 
SetFilesPanel}{\cf17 
. Setting parameters and destination modules or channels are selected in the same manner as in the copy panel. Click the "Extract" button to execute the operation, then "Close" to close the ExtractPanel, and "Close" again to close the CopyPanel. 
\par }{\cf1 
\par 
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 Parameter data base
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The parameter settings of all modules in the system are stored in a data base which can be saved to the hard disk. The buttons in the Data Base row of the }{\ul\cf2 RunControlPanel}{\cf1 
 help to manage this information. It will be saved in the file SettingsFile specified in the }{\ul\cf2 SetFilesPanel}{\cf1 
. Consult the user's manual for a detailed description of the data base organization, and how it can be used to aid offline data analysis.
\par }{\ul\cf2 RunControlPanel}{\cf1 [Save] will save the current data base to disk. }{\ul\cf2 RunControlPanel}{\cf1 [Read] will  read a previous configuration from the SettingsFile into the data base.  }{\ul\cf2 RunControlPanel}{\cf1 
[Apply] will download and activate the parameter set that was just written to the data base via the read button. 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 Offset
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Offsets]
\par The DC }{\ul\cf2 offset}{\cf1  of the preamplifier signal has to be compensated for in order to bring the DC-coupled input into the ADC range. The DC offset has to be known on a channel-by-channel basis. It may
 have to be adjusted during the experiment since it can change depending on experimental conditions. 
\par The most frequently used tasks in this section are available through push buttons.  Three windows displaying diagnostic information are available from the Windows pull-down menu.  They include a DAC monitor (}{\ul\cf2 TDACdisplay}{\cf1 
), a display of the untriggered incoming waveform (}{\ul\cf2 DCdisplay}{\cf1 ), and a Fourier transform of the untriggered trace (}{\ul\cf2 FFTdisplay}{\cf1 ).
\par 
\par The track DACs are automatically adjusted to compensate for DC offsets by pressing }{\ul\cf2 RunControlPanel}{\cf1 [Offsets]. All channels in the selected module marked as "Good" in the }{\ul\cf2 CCSRAEditPanel}{\cf1 
 will have their DC offsets adjusted at the same time. In rare cases the automatic offset calibration procedure fails for some channels. 
In other cases the user may want to set the DC-offsets to other than the automatically selected values.  To achieve this quickly, observe the menu bar and find Windows -> Graph macros -> }{\ul\cf2 TDACdisplay}{\cf1 . 
\par 
\par The standard offset level set by the DGF-Viewer are 10% of the ADC range for a unipolar signal and 50% (midlevel) for a bipolar signal. In Revision D and Revision E modules, this corresponds to values of 1600 and 8192 in the }{\ul\cf2 DCdisplay}{\cf1 
. The exact DC value has no bearing on the acquired spectrum and its origin, which is always at zero.  The DC-adjustment is used only to ensure that the signals to be measured fall comfortably into the ADC range.
\par The offset calibration must be performed with the preamplifiers connected to the DGF-4C inputs and with both the preamp
lifier power and detector HV switched on. One should also repeat the offset calibration each time measurement conditions change in any major way, e.g., when the count rate changes greatly. All such changes may influence the DC offset value of the preampli
fier signal.  Remember to set }{\ul\cf2 Bit 15: Bipolar}{\cf1  of the }{\ul\cf2 CCSRAEditPanel}{\cf1  according to whether the input signal is expected to be unipolar or bipolar.   
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 TDACdisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This TDACdisplay is a diagnostic chart accessible through the menu bar as Windows -> Graph macros -> }
{\ul\cf2 TDACdisplay}{\cf1 . The  display shows a plot of the ADC response vs the DAC setting.  It can be used to find the DAC value for a desired offset level. Select the chann
el you are interested in by unchecking the three other trace check boxes.  Use the mouse to zoom in on the interesting region, and note the DAC value that gives the desired result. 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 TauDisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Tau]
\par For continuous reset preamplifiers th
e DGF-4C needs to know the exponential RC time constant  in order to properly calculate corrections to measured energy values. The RC time has to be known on a channel-by-channel basis. The RC calibration needs to be performed only once for a given preamp
lifier. The result is then stored in the database.
\par  
\par The user can select the module and channel to study. }{\ul\cf2 TauDisplay}{\cf1 [Run] acquires a trace consisting of 8001 samples. The time between samples is dT and can be adjusted between 0.075}{\f3\cf1 \'6d}{\cf1 s and 819.25}{\f3\cf1 \'6d}{\cf1 
s. The risin
g edge of the signal will not be visible because the acquisition starts only after the trigger has been received by the digital signal processor (DSP), which only then begins to read ADC data.  If you receive a flat line there was no trigger within 1 seco
nd of the run start.
\par One can perform an exponential fit to a part of the ADC trace by adjusting tmin and tmax (both in }{\f3\cf1 \'6d}{\cf1 s) and using }{\ul\cf2 TauDisplay}{\cf1 
[DoFit]. The fit quality can be judged from the graphical display of the residual that is added to the graph. If you like the result, }{\ul\cf2 TauDisplay}{\cf1 [TauOK] will store the exponential RC decay constant in the }{\ul\cf2 parameter data base}{
\cf1 .  It will also compute a number of coefficients that are necessary for the energy reconstruction and download these into the DGF-4C. The value of 
the RC constant is indicated in the box entitled "tau =". Instead of performing the fit one can enter a value here, and use }{\ul\cf2 TauDisplay}{\cf1 [TauOK] in order to accept that value. 
\par The exponential-fit routine determines the amplitude and decay constant of an expo
nential signal plus the DC-offset.  Thus the fit range needs to be chosen wide enough so that the fit routine can sample the DC-offset well. Usually, a small dT gives the best resolution of the exponential decay and thus yields the best RC value. 
\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 DCdisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {=}{\ul\cf2 RunControlPanel}{\cf1  [DCdisplay]
\par This chart displays the untriggered input signal (8192 ADC samples) for each channel.  The time between samples is dT.
\par The chart is updated in response to }{\ul\cf2 RunControlPanel}{\cf1 [Offsets] or through its Refresh button.  When the signal decay time is 50}{\f3\cf17 \'6d}{\cf17 s}{\cf1 , a nice overview over the activity in the system is obtained with a dT of 10}{
\f3\cf17 \'6d}{\cf17 s}{\cf1 ; the time span thus covered in a single trace in }{\ul\cf2 DCdisplay}{\cf1  is 2}{\cf17 ms}{\cf1 . 
\par You can analyze the noise spectrum of the captured trace in the }{\ul\cf2 FFTdisplay}{\cf1  (click on "Show FFT"). To measure and apply a }{\ul\cf2 Baseline Cut}{\cf1 , click on "Baseline".
\par  
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 Baseline Cut
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
In the "Baseline Calibration" panel, you can measure the threshold for the rejection of contaminated baselines (bas
eline cut). This is of particular importance for older detectors with very slow rising pulses or segmented detectors where spectator pulses can be negative. Such pulses are not detected by the trigger filter and could lead to baseline samples above or bel
ow the true baseline. In a good event following such a corrupted baseline, the baseline correction to the energy value would be incorrect. 
\par 
\par In the Baseline panel, click on "Measure", then on "View". The graph shows the
\par distribution of measured baselines,  ideally a very narrow peak around zero.
\par 
\par "Baseline Sigma" shows the standard deviation of the baseline distribution in the graph. 
\par "BLcut" is the recommended value of the baseline cut (same units as the x-axis of the 
\par graph). You can also enter your own estimate of the cut 
\par "Accept" applies the "BLcut" value to the module. 
\par "Clear" sets BLcut to zero, which disables the baseline cut.
\par 
\par Finding the baseline cut value is an iterative process. Click on "Measure" to acquire a new set of baseline samples. Then cl
ick "Accept" to apply the recommended value to the module. Click on "Measure" again. The baseline distribution should be narrower, and BLcut smaller than before. "Accept" again, "Measure" again, etc, until BLcut does not change any more. Usually, 2-3 iter
ations are sufficient. 
\par 
\par BLcut is set to zero (=disabled) whenever you change threshold, peaking time or gap time. Therefore, you have repeat the mesurement after each change. 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 FFTdisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {You can analyze the noise spectrum in the trace captured in the }{\ul\cf2 DCDisplay}{\cf1 
, by observing the Fourier transform of the signal.  The Fourier transform is available through the menu bar as Windows->Graph Macros -> }{\ul\cf2 FFTdisplay}{\cf1 
.  Using the "source channel" control, you can specify which trace from the DCDisplay is converted and shown. 
\par The chart shows a plot of amplitude vs. frequency.  The plot is calibrated such that a sine wave with 100 ADC units amplitude (200 units peak-to-peak) will show up with an amplitude of 100.  To convert a noise floor measurement into ADC units/sqr
t(Hz) use the variable FFTbin displayed at the top of the chart, which tells the width of each frequency bin in the Fourier spectrum.  The conversion from amplitudes to rms ADC units/sqrt(Hz) is accomplished by multiplying with 1/sqrt(2*FFTbin).  Now, obs
e
rve that an ADC unit corresponds to 244mV.  Using the known gain of the DGF-4C you can convert the noise into an input noise voltage density measured in V/sqrt(Hz).  Or, given a particular energy calibration, the noise density can be expressed as eV/sqrt(
Hz).
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 Baseline Cut
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {=}{\ul\cf2 RunControlPanel}{\cf1  ->  }{\ul\cf2 DCDisplay}{\cf1  [Baseline]
\par The DGF needs to sample the outputs of the energy filters frequently in between events to obtain certain baseline quant
ities.  In some cases the baselines can be contaminated by events below the trigger threshold, i.e. very small or very slow rising pulses. This is of particular concern for older detectors with slow rising pulses from low field regions, and for segmented 
d
etectors where spectator pulses can be negative. In such events, the baseline sample will be above or below the true baseline, and the baseline correction of the energy for the next true event will be off. The DGF can perform a baseline cut, i.e. reject s
uch contaminated baseline samples, based on the deviation from the average zero value.
\par 
\par To determine the deviation of baseline values from the average value of zero, click on "Measure" .  The result will be displayed in the control called "Baseline Sigma". 
 "BLcut" will be set to the recommended cut value of 3 times sigma. You can modify this value, then click "Accept". To disable the baseline cut, click on "Clear", or set "BLcut" to zero, then "Accept". 
\par 
\par Clicking on "View" opens a graph that shows a number of ADC samples together with the corresponding baseline values at a given time. Normally, the baseline values should be small, in the order of +/- 3. Undetected pulses result in large deviations. 

\par 
\par Furthermore, pulses from preamplifiers with non-exponential decay will show baseline deviations for each pulse, decreasing to as the pulse decays. 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 RunPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Start]
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Run Time Settings
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {In the top left corner of the }{\ul\cf2 RunPanel}{\cf1 
 you can set the polling time in seconds.  At the requested rate the DGF-Viewer will check if the run in the selected module has ended.  If so, runs are stopped in all modules, if they have not stopped already, and the data are read out.
\par The second time variable is used to indicate the total run time when in }{\ul\cf2 MCA mode}{\cf1  and the timeout limit when running in }{\ul\cf2 list mode}{\cf1 . 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Module Synchronization
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The first check box in the top right corner of the }{\ul\cf2 RunPanel}{\cf1 
 asks if all modules should start and stop simultaneously.  In almost all multi-module systems this will be the case and the box 
should be checked.  For this to work all Busy front panel DGF-4C outputs have to be connected to a common OR-gate, whose outputs must be sent to all Synch inputs on DGF-4C front panels (NIM signal levels).  
\par 
\par If with the start of the next data acquisition 
run you also want all timers in all modules to be reset, click the box "Synchronize clocks".  For this feature to be useful all DGF-4C modules should be operating from the same master clock as described in the user's manual
\par 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Run Types
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The popup menu in the bottom left section of the }{\ul\cf2 RunPanel}{\cf1 
 is used to set the run type to one of the following modes:
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {List Mode
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
List mode is the general data acquisition run. Waveforms, energies and time stamps are collected on a event-by-event basis. The data is stored in a various formats (see section 3.6 of the user manual for details):
\par \tab 0x100\tab full event data (9 words), plus waveforms
\par \tab 0x101\tab full event data (9 words), no waveforms
\par \tab 0x102\tab compressed event data (4 words), no waveforms
\par \tab 0x103\tab compressed event data (2 words), no waveforms
\par 
\par Since available memory limits the number of events that each module can store in its buffer, the DGF Viewer computes the maximum number of events. When the maximum is reached, the run is stopped and the buffer
 is read out. For a longer run in list-mode, you can request several spills, or buffer fills.  For example, if you request a run with 10 spills, you will get 10 list mode buffers worth of data.  At start of the first run all previous run history is cleare
d.  For instance MCA memory and run and live time information are cleared.  The next nine sub-runs are started with a ResumeRun command, which leaves previous run information intact.  Run times and live times and spectra in MCA memory are updated.
\par 
\par You can 
also manually adjust the maximum number of events stored before the run is stopped.  Some data acquisition systems, which are geared towards event-by-event readout and are not able to handle large buffers, may benefit from the capability to reduce the max
imum number of event per spill.
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Fast List Mode
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Fast list mode is an event-by-event data acquisition run without waveforms. Since no traces are read out, the data aquisition is faster than a regular list mode. The data is stored in a various formats (see section 3.6 of the user manual for details):

\par \tab 0x200\tab full event data (9 words), no waveforms
\par \tab 0x201\tab full event data (9 words), no waveforms
\par \tab 0x202\tab compressed event data (4 words), no waveforms
\par \tab 0x203\tab compressed event data (2 words), no waveforms
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {MCA Mode
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {MC
A mode puts all modules into a typical spectrum-only acquisition mode in which there are no list-mode data required. The event data is not stored in the output buffer, but only used to calculate the energy for incrementing the spectrum. Runs end after the
 time specified in the "TimeOut" control. The MaxEvents-exceeded run abort is disabled by setting this variable to zero. 
\par 
\par 
\par 
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Run Data File
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {In the lower right area of the }{\ul\cf2 RunPanel}{\cf1 
 you can choose a base name and a run number.  The run data will be written to a file whose name is composed of both, the base name and the run number.  The run number is automatically incremented at the end of each run, but you can as well set it manuall
y. Data buffers are stored in a file in the Data Path directory. The file name extension is ".bin".  
\par 
\par }\pard\plain \s17\ql \fi-1160\li1440\ri720\sa60\nowidctlpar\faauto\rin720\lin1440\itap0 \b\f7\fs20\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Start Run
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {If you want to acquire data with the DGF-Viewer use }{\ul\cf2 RunPanel}{\cf1 
[Run]. A sub-run stops when the first module reaching the preset maximum number of events stops the run in all modules. (The Busy/Synch connectors need to be connected as described in }{\ul\cf2 Module Synchronization}{\cf1 
 if the module operation is to be synchronized.) The total number of sub-runs is given by the spills variable. The readout consists of readout spills. Each spill consists of one data buffer per each DGF-4C module. 
\par 
\par While running, a spinning wheel appears at the lower left corner of the main IGOR window. To cancel the run, you can click on the "abort" button beside the wheel. You should then click on the "Stop" button in the }{\ul\cf2 RunPanel}{\cf1 
 to close the files opened during the run. 
\par 
\par 
\par Note: 
\par Together with the PC host computer the DGF-4C modules and the SCSI CAMAC controller are a data acquisition system in their own right. If you would rather take data through your own system, you will not exercise all of the options and buttons of the }{
\ul\cf2 RunPanel}{\cf1 . Instead, at this point the DGF-4Cs are set up and ready and your acquisition system can take over.
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 EventDisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Events]
\par After a }{\ul\cf2 list mode}{\cf1  run has finished the pulse shape can be displayed on an event-by-event basis in the Event display. The most recently acquired data file will be searched for event required in 
the Event number field. The display will show the ADC traces from the module selected in the }{\ul\cf2 RunControlPanel}{\cf1 , and the associated Energy for those channels that reported a hit in this event.
\par Traces are scaled as 16bit numbers, but to match the ADC, the associated Energies are scaled as 12bit numbers, i.e. divided by 16. This is true even for Revision E modules with a 14bit ADC. 
\par 
\par In order to display traces from an earlier experimental run one needs to change the run file name as described in the }{\ul\cf2 SetFilesPanel}{\cf1 . 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 FilterDisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
If you want to see the response of the fast filter, used for the leading edge trigger, open Windows ->Graph macros->}{\ul\cf2 FilterDisplay}{\cf1 .  It allows you to browse acquired waveforms, one channel at a time. It includes the leading edge trigger
 filter response, and the energy filter response.  The latter requires a trace length of at least twice the peaking time plus the gap time to be displayed.  The trace is shown in red.  The trigger filter is shown in blue (FF is for fast filter), and the e
nergy filter is shown in green (SF is for slow filter).
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 MCAdisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Pulse-height spectra accumulated in the internal DGF-4C memory can be displayed after pressing the MCA button. Pulse heights are computed to 16 bits precision, i.e. correspond to 64k spec
tra. As the memory allows for only 32k words per channel (for Revision C modules, 8192 words total for all channels), bins have to be combined in the }{\ul\cf2 On board MCA}{\cf1  section of the InstrumentPanel to see the full spectrum.
\par 
\par You can select the module you want to inspect and you can add or remove individual channel displays by clicking the histo check boxes.
\par 
\par For energy spectra you can make Gaussian fits to peaks in the histograms. On a channel-by-channel basis you can set fit ranges, which the Viewer will remember. }{\ul\cf2 MCAdisplay}{\cf1 
[GaussFit] calls the fitting routine. The routine does take a constant background term into account, though its value is not displayed. The fit results that are displayed include the peak position, the number of counts in the peak, and its r
elative and absolute full width at half maximum (fwhm).  For best results be sure to extend the fit range to cover some of the constant background.  Be sure to select the channel you want prior to entering the fit range and requesting the Gauss fit.

\par 
\par To calibrate your energy scale, you can after the fit type the true energy value into the field "peak" and the scale will automatically be adjusted.
\par 
\par To see the fitting parameters and their statistical errors in more detail, click on }{\ul\cf2 MCAdisplay}{\cf1 [FitStatistics]. 
 A panel opens that shows the fitted values for peak position, magnitude, sigma and underlying constant background of the last performed Gauss fit. The standard deviation of these values is shown either in percent or as absolute value, depending on the ch
eckbox labeled "in %". Use the "To History" button to display the data in the IGOR's history window, from where it can be copied to other applications. 
\par 
\par }{\ul\cf2 MCAdisplay}{\cf1 [Sum histo] computes the number of histogram entries between the limits set in the "min" and "max" fields (minus background).  The result is displayed in the "area" field. 
\par 
\par }{\ul\cf2 MCAdisplay}{\cf1 [Save] and }{\ul\cf2 MCAdisplay}{\cf1 [Read] allow to store individual spectra and read back stored spectra from disk.
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 SpectrumDisplay
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Pulse height spectra can be reconstructed from }{\ul\cf2 list mode}{\cf1 
 data stored on the PC disk. The most recent data file will be processed and the resulting histograms will be displayed for the selected DGF-4C module. The full spectrum length is equal to 64k channel
s. Use "No. of bins" and "Delta E" settings to compress the spectrum such that it fits the display. Hint: use 8000 and 4 to see the full range of data, and then adjust these numbers to zoom into the range of interest. Note that you have to press "Histo" t
o update and initialize the displayed spectra.  The number of bins and the deltaE variables are kept in memory for each channel individually.  Be sure to select the channel of interest prior to changing these variables.
\par Use the mouse to zoom in on peaks of interest.  In the max and min fields you can select a fit range.  }{\ul\cf2 SpectrumDisplay}{\cf1 
[Gauss fit]  will produce a Gaussian fit with constant background.  Displayed results are the area under the peak and the energy resolution.  Again the min and max variables a
re stored for each channel.  Select the correct channel before attempting to do the Gauss fit.
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 RunStatsPanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {= }{\ul\cf2 RunControlPanel}{\cf1 [Statistics]
\par Run summary parameters such as count rates can be displayed by pressing the Statistics button in the }{\ul\cf2 RunControlPanel}{\cf1 
.  At the top it shows the run time and the measured event rate for the selected module.  Below it shows for each channel the fractional live time and the input count rate.  
\par Note that the run time is the sum of time spent in sub-runs, but ignoring the time it took the host to read out the DGF-4C modules.  Similarly, the live time was measured only while one of the sub-runs (called spills) was ongoing. 
\par }{\cf19 
\par }{\cf1 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 DSPview
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This table displays the 416 parameters of the I/O block that is used for controlling the o
peration of the DGF-4C.  It is updated whenever an Apply button is pressed or when a run has ended.  It can be manually updated by typing GetModPar(n) in the command line, where 'n' is the module number.   If you want to change table entries manually call
 }{\ul\cf2 DSPpanel}{\cf1 
() first and proceed from there.  With the help of that panel you can change DSP parameters without interference from the DGF-Viewer.  This feature is useful when new parameters are being introduced that are unknown to the Viewer and therefore not 
otherwise supported.  The function MemoryScan does not update this table.
\par 
\par Editing the table does not change the values in the DSP.  To close the table use the windows close button and answer "No Save" to the following prompt.  If you changed the size and position of the table and want to retain that, choose "Replace" instead. 

\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 VariableView
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
In this table all variables from all parts of the DSPcode are listed, including those in the segment User.  User variables show up at the very end of this list.  Th
e list contains the names, addresses and values of all named variables.  It is updated by calling MemoryScan(n) from the command line.  n indicates the module number.  The addresses listed are those seen by the DSP.  
\par 
\par Editing the table does not change the values in the DSP.  To close the table use the windows close button and answer "No Save" to the following prompt.  If you changed the size and position of the table and want to retain that, choose "Replace" instead. 

\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 MemoryView
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This is a list of all c
onsecutive data memory locations.  For those locations in which a known variable is stored, the name of the variable is also given.  Note that buffer names are entered only once, namely at the location at which the buffer begins.  In the table the column 
named Point indicates the address in DSP memory space.  The table is updated by calling MemoryScan(n), with n being the module number.
\par 
\par Editing the table does not change the values in the DSP.  To close the table use the windows close button and answer "No Save" to the following prompt.  If you changed the size and position of the table and want to retain that, choose "Replace" instead. 

\par 
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 FindVar("VARNAME")
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Use this function from the command line to find the address and value of any 
variable.  VARNAME must be in capital letters, and may be a partial variable name.  All matches are returned.  Thus FindVar("USER :") will return the address and value of all variables in the segment User. (Yes, there is a space between the R and the : ).
  FindVar does not call MemoryScan.  If you suspect the variable of interest is changing, call MemoryScan in between consecutive calls to FindVar.
\par 
\par 
\par }\pard\plain \s15\ql \fi-260\li260\ri0\sb120\sa120\nowidctlpar\tx1440\faauto\rin0\lin260\itap0 \b\f7\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs20\ulnone \bullet \tab }{\fs20 DSPpanel
\par }\pard\plain \s18\ql \li260\ri720\nowidctlpar\tx540\tx1440\tx4320\faauto\rin720\lin260\itap0 \f7\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This panel is not linked to any of the other control panels and has to be called from the command
 line.  If for program development or when running specialty FiPPIs or DSP code there are variables, which have to be set, but are not supported by the general panels, they can be edited here.  DSPpanel[View DSP] will call a table of all 416 host accessib
le DSP parameters, including those that are supported by the general panels.  Whenever a new module is selected you have to close the open table using }{\ul\cf2 DSPpanel}{\cf1 
[Done] and reopen it, as the table is deliberately not updated when changing the module to allow for copy operations.  If more than one table is open, }{\ul\cf2 DSPpanel}{\cf1 [Done] closes them one at a time.  
\par There are two rows of Get and Put buttons.  The top row acts on the local database only, receiving data from it and writing edited values back.  The bottom row
 includes the module into this action, receiving data from the module and writing data to the module.  The bottom row buttons include the action of the top row buttons.
\par }{\ul\cf2 DSPpanel}{\cf1 [Apply] calls DSP functions to reprogram the DACs and FPGAs in order to activate the new settings.
\par 
\par 
\par 
\par }}