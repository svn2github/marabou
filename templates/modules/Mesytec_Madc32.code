/*_________________________________________________________________[CODE FILE]
//////////////////////////////////////////////////////////////////////////////
// Name:           Mesytec_Madc32.code
// Purpose:        Code for Mesytec adc type MADC-32
// Description:    Contains template code to operate a MADC-32 module
// Author:         R. Lutter
// Revision:
// Date:
// Keywords:
////////////////////////////////////////////////////////////////////////////*/

%%BeginOfCode%%
#include "madc32.h"
#include "madc32_protos.h"
%%EndOfCode%%
%%MODULE_DEFS%%

%%BeginOfCode%%
					madc32_use_mcst = FALSE;
					madc32_firstModuleInChain = NULL;
%%EndOfCode%%
%%INIT_COMMON_CODE%%

%%BeginOfCode%%

									/* init module $moduleNameLC at addr $baseAddr */
					f_ut_send_msg("m_read_meb", "Initializing module $moduleNameLC in $modulePosition: $moduleTitle\n", ERR__MSG_INFO, MASK__PRTT);
					s_$moduleNameLC = madc32_alloc("$moduleNameLC", md_$moduleNameLC, $moduleSerial); /* allocate data struct */
 					moduleTable[kMrbModule$moduleNameUC - 1].devStruct = (void *) s_$moduleNameLC;
					madc32_moduleInfo(s_$moduleNameLC);						/* read module info */
					madc32_soft_reset(s_$moduleNameLC);	 						/* reset module */
					madc32_fillStruct(s_$moduleNameLC, "$settingsFile");		/* fill database from environment data */
					madc32_loadFromDb(s_$moduleNameLC, $chnPattern); 			/* load module regs from database */
					if (madc32_mcstIsEnabled(s_$moduleNameLC)) {
						madc32_use_mcst = TRUE;
						if (madc32_isFirstInChain(s_$moduleNameLC)) madc32_firstModuleInChain = s_$moduleNameLC;
					}
					if (madc32_useBLT(s_$moduleNameLC)) use_block_xfer = TRUE;	/* check if block xfer should be enabled */
					madc32_setModuleId(s_$moduleNameLC, $serial); 				/* update module id */
					madc32_dumpRegisters(s_$moduleNameLC, "$dumpFile"); 		/* dump registers to file */
					madc32_initialize(s_$moduleNameLC);		 					/* initialize module */

%%EndOfCode%%
%%INIT_MODULE%%

%%BeginOfCode%%
						if (madc32_useBLT(s_$moduleName)) {
							mapBLT(md_$moduleName, $baseAddr, $size, $addrMod);
							setBLTMode(md_$moduleName, BMA_M_Vsz32, BMA_M_WzD32, $fifoMode);
						}
%%EndOfCode%%
%%INIT_BLOCK_XFER%%

%%BeginOfCode%%

%%EndOfCode%%
%%INIT_CHANNEL%%

%%BeginOfCode%%

%%EndOfCode%%
%%READ_CHANNEL%%

%%BeginOfCode%%
					evt.out32 += madc32_readout(s_$moduleName, (uint32_t *) evt.out32);	/* read data */
					if (s_$moduleName->updSettings) { 				/* update settings? */
						s_$moduleName->updCountDown--;
						if ((s_$moduleName->updCountDown <= 0) && madc32_updateSettings(s_$moduleName, "$updateFile")) {
 							sprintf(msg, "Updating settings for module $moduleName after %d count(s)\n", s_$moduleName->updInterval);
 							f_ut_send_msg("m_read_meb", msg, ERR__MSG_ERROR, MASK__PRTT);
							madc32_stopAcq(s_$moduleName);
							madc32_soft_reset(s_$moduleName);
							madc32_fillStruct(s_$moduleName, "$settingsFile");
							madc32_loadFromDb(s_$moduleName, $chnPattern);
							madc32_resetReadout(s_$moduleName);
							madc32_resetFifo(s_$moduleName);
							madc32_startAcq(s_$moduleName);
						}
					}
%%EndOfCode%%
%%READ_MODULE%%

%%BeginOfCode%%

%%EndOfCode%%
%%INCREMENT_CHANNEL%%

%%BeginOfCode%%

%%EndOfCode%%
%%SKIP_CHANNELS%%

%%BeginOfCode%%

%%EndOfCode%%
%%WRITE_SUBADDR%%

%%BeginOfCode%%

%%EndOfCode%%
%%STORE_DATA%%

%%BeginOfCode%%

%%EndOfCode%%
%%CLEAR_MODULE%%

%%BeginOfCode%%

%%EndOfCode%%
%%SETUP_READOUT%%

%%BeginOfCode%%

%%EndOfCode%%
%%FINISH_READOUT%%

%%BeginOfCode%%
%M%								if (madc32_use_mcst && madc32_firstModuleInChain) { 	/* start modules in multicast mode */
%M%									sprintf(msg, "[Starting Mesytec modules via MCST - first module in chain is %s]\n", madc32_firstModuleInChain->moduleName);
%M% 									f_ut_send_msg("m_read_meb", msg, ERR__MSG_ERROR, MASK__PRTT);
%M%									madc32_stopAcq_mcst(madc32_firstModuleInChain);
%M%									madc32_startAcq_mcst(madc32_firstModuleInChain);
%M%									break;		/* all done! */
%M%								}
%M%								madc32_stopAcq(s_$moduleName);	/* start module $moduleName */
%M%								madc32_startAcq(s_$moduleName);
%N%								madc32_stopAcq(s_$moduleName);	/* start module $moduleName */
%N%								madc32_startAcq(s_$moduleName);
%%EndOfCode%%
%%START_ACQUISITION%%

%%BeginOfCode%%

%%EndOfCode%%
%%START_ACQUISITION_GROUP%%

%%BeginOfCode%%
%M%								if (madc32_use_mcst) { 	/* stop modules in multicast mode */
%M%									madc32_stopAcq_mcst(madc32_firstModuleInChain);
%M%									break;		/* all done! */
%M%								}
%M%								madc32_stopAcq(s_$moduleName);	/* stop module $moduleName */
%N%								madc32_stopAcq(s_$moduleName);	/* stop module $moduleName */
%%EndOfCode%%
%%STOP_ACQUISITION%%

%%BeginOfCode%%

%%EndOfCode%%
%%STOP_ACQUISITION_GROUP%%

%%BeginOfCode%%

%%EndOfCode%%
%%UTILITIES%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_PROTOTYPES%%

%%BeginOfCode%%
static struct s_madc32 * s_$moduleName;
%%EndOfCode%%
%%DEFINE_GLOBALS%%

%%BeginOfCode%%
static bool_t madc32_use_mcst;
static struct s_madc32 * madc32_firstModuleInChain;
%%EndOfCode%%
%%DEFINE_GLOBALS_ONCE_ONLY%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_LOCAL_VARS_INIT%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_LOCAL_VARS_READOUT%%

%%BeginOfCode%%
	-I@{.PPCIncludePath:/nfs/marabou/include}
%%EndOfCode%%
%%DEFINE_INCLUDE_PATHS%%

%%BeginOfCode%%
	-L@{.PPCLibraryPath:/nfs/marabou/lib}  -lMadc32
%%EndOfCode%%
%%DEFINE_LIBRARIES%%

