/*_________________________________________________________________[CODE FILE]
//////////////////////////////////////////////////////////////////////////////
// Name:           Sis_3302.code
// Purpose:        Code for digitizing adc SIS 3302
// Description:    Contains template code to operate a SIS 3302 module
// Author:         R. Lutter
// Revision:
// Date:
// Keywords:
////////////////////////////////////////////////////////////////////////////*/

%%BeginOfCode%%
#include "sis_3302_database.h"
#include "sis_3302_layout.h"
#include "sis_3302_protos.h"
%%EndOfCode%%
%%MODULE_DEFS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INIT_COMMON_CODE%%

%%BeginOfCode%%

									/* init module $moduleName at addr $baseAddr */
					f_ut_send_msg("m_read_meb", "Initializing module $moduleNameLC in $modulePosition: $moduleTitle\n", ERR__MSG_INFO, MASK__PRTT);
					s_$moduleNameLC = sis3302_alloc($baseAddrL, $moduleNameLC, "$moduleNameLC", $moduleSerial); /* allocate data struct */
					moduleTable[kMrbModule$moduleNameUC - 1].devStruct = (void *) s_$moduleNameLC;
					sis3302_moduleInfo(s_$moduleNameLC);				/* read module info */
					sis3302_checkAddressSpace(s_$moduleNameLC);			/* check address space: full(128MB) or reduced(16MB) */
					sis3302_fillStruct(s_$moduleNameLC, "$settingsFile");		/* fill sis struct from file */
					sis3302_loadFromDb(s_$moduleNameLC);			 	/* load module regs from database */
					sis3302_setActiveChannelsFromDb(s_$moduleNameLC);	 	/* define active channels (according to trigger mode) */
					sis3302_setBufferSize(s_$moduleNameLC, $bufferSize);		/* set max buffer size */
					sis3302_setTracingMode(s_$moduleNameLC, $tracingMode);		/* turn tracing $onoff */
					sis3302_resetSampling(s_$moduleNameLC);				/* reset sampling */
					sis3302_clearTimestamp(s_$moduleNameLC);			/* reset time stamp */
					sis3302_enable_bma(s_$moduleNameLC);				/* enable/disable bma */
					sis3302_dumpRegisters(s_$moduleNameLC, "$dumpFile");		/* dump registers */

%%EndOfCode%%
%%INIT_MODULE%%

%%BeginOfCode%%

%%EndOfCode%%
%%INIT_CHANNEL%%

%%BeginOfCode%%

%%EndOfCode%%
%%READ_CHANNEL%%

%%BeginOfCode%%
					if (sis3302_dataReady(s_$moduleNameLC)) {
						sis3302_switchSampling(s_$moduleNameLC);
						evt.out32 += sis3302_readout(s_$moduleNameLC, (unsigned int *) evt.out32);
					}
%%EndOfCode%%
%%READ_MODULE%%

%%BeginOfCode%%

%%EndOfCode%%
%%INCREMENT_CHANNEL%%

%%BeginOfCode%%

%%EndOfCode%%
%%SKIP_CHANNELS%%

%%BeginOfCode%%

%%EndOfCode%%
%%WRITE_SUBADDR%%

%%BeginOfCode%%

%%EndOfCode%%
%%STORE_DATA%%

%%BeginOfCode%%

%%EndOfCode%%
%%CLEAR_MODULE%%

%%BeginOfCode%%

%%EndOfCode%%
%%SETUP_READOUT%%

%%BeginOfCode%%

%%EndOfCode%%
%%FINISH_READOUT%%

%%BeginOfCode%%
					sis3302_startAcquisition(s_$moduleNameLC, $nofEvents);
%%EndOfCode%%
%%START_ACQUISITION%%

%%BeginOfCode%%

%%EndOfCode%%
%%START_ACQUISITION_GROUP%%

%%BeginOfCode%%
					sis3302_stopAcquisition(s_$moduleNameLC);
%%EndOfCode%%
%%STOP_ACQUISITION%%

%%BeginOfCode%%

%%EndOfCode%%
%%STOP_ACQUISITION_GROUP%%

%%BeginOfCode%%

%%EndOfCode%%
%%UTILITIES%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_PROTOTYPES%%

%%BeginOfCode%%
static struct s_sis_3302 * s_$moduleNameLC;
%%EndOfCode%%
%%DEFINE_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_GLOBALS_ONCE_ONLY%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_LOCAL_VARS_INIT%%

%%BeginOfCode%%

%%EndOfCode%%
%%DEFINE_LOCAL_VARS_READOUT%%

%%BeginOfCode%%
	-I@{.PPCIncludePath:/nfs/marabou/include}
%%EndOfCode%%
%%DEFINE_INCLUDE_PATHS%%

%%BeginOfCode%%
	-L@{.PPCLibraryPath:/nfs/marabou/lib}  -lSis_3302
%%EndOfCode%%
%%DEFINE_LIBRARIES%%

