%%BeginOfCode%%
Bool_t TMrbSubevent_Caen_V556::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Caen_V556::FillSubevent
// Purpose: 	   Decode CAEN buffer
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:
// Description:    Decodes data from a CAEN V556 ADCs.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record
	Int_t origSevtWC = SevtWC;				// save original subevent wc
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several CAEN modules
		UShort_t header = *dataPtr++; 						// header
		if ((header & CAEN_V556_B_HDR) == 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong header - 0x" << setbase(16) << header << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		Int_t wc = (header >> CAEN_V556_SH_WC) & CAEN_V556_M_WC;				// extract wc
		wc++;												// header contains number of channels - 1
		Int_t wcs = wc + 1;									// include header word
		if (wc < 0 || wc > CAEN_V556_N_CHANS) {				// max 8 data words
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong word count", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong word count - " << wc << setblack << endl;
			return(kTRUE);
		}
		Int_t moduleNumber = header & CAEN_V556_M_MSERIAL;	// extract module number
		TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
		if (mle == NULL) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}

		mle->IncrEventHits();				// count this event

		UShort_t evtData[2];
		for (; wc; wc--) {
			UShort_t data = *dataPtr++;		// data
			if ((data & CAEN_V556_B_HDR) != 0) {
				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong data", SevtData, origSevtWC);
				cerr	<< setred
						<< this->ClassName() << "::FillSubevent(): [Module "
						<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
						<< wordsProcessed << "] Wrong data - 0x" << setbase(16) << data << setbase(10)
						<< setblack << endl;
				return(kTRUE);
			}
			Int_t chn = (data >> CAEN_V556_SH_CHN) & CAEN_V556_M_CHN;
			mle->IncrChannelHits(chn);			// count this channel
			evtData[0] = 0;
			evtData[1] = data & CAEN_V556_M_DATA;
			TUsrHit * hit = this->GetHitBuffer()->AddHit(	eventsProcessed,
											moduleNumber,
											chn,
											NULL,
											evtData, 2);
			if (hit == NULL) {
				cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Error while filling hitbuffer - giving up"
					<< setblack << endl;
				return(kTRUE);
			}
		}
		SevtWC -= wcs;						// remaining subevent data
		wordsProcessed += wcs;
		if (wcs & 1) {						// aligned to 32 bit (even number of shorts)
			dataPtr += sizeof(Short_t);			// word count is odd -> skip over filler
			SevtWC--;
			wordsProcessed++;
		}  				 
		eventsProcessed++;
	}
	return(kTRUE);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%


%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
