%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name:           TUsrSevt$sevtNameUC::FillSubevent
%B%// Purpose:        Fill local instance of subevent $sevtNameLC with MBS data
%B%// Arguments:      const UShort_t * SevtData   -- pointer to subevent data
%B%//                 Int_t SevtWC                -- word count
%B%//                 Int_t TimeStamp             -- time since last start
%B%//                                                in units of 100 microsecs
%B%// Results:        kTRUE/kFALSE
%B%// Exceptions:     
%B%// Description:    Assigns MBS data to corresponding data members
%B%//                 of subevent $sevtNameLC.
%B%//                 Special version for CAEN ADCs/TDCs.
%B%// Keywords:       
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%B%	Int_t wc;
%B%	Int_t moduleNumber;
%B%	Int_t chn;
%B%	UShort_t * dataPtr;
%B% 	Int_t data;
%B%	Int_t wordsProcessed;
%B%						
%C% fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
%C% this->SetTimeStamp(TimeStamp);			// passed as argument by parent event
%C%
%C% this->GetHitBuffer()->Reset();			// clear hit buffer
%C%
%C% recNo++;						// count this record	
%C% if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, SevtWC);
%C% Int_t wordsProcessed = 0; 			// words processed so far
%C% UShort_t * dataPtr = (UShort_t *) SevtData;
%C% Int_t eventsProcessed = 0;
%C% while (SevtWC > 0) {						// subevent may contain several C_PTM modules
%C% 	Int_t wc = *dataPtr++; 					// header word 1: number of words in buffer
%C% 	wc -= 2;								// 2 words header
%C% 	SevtWC -= 2;
%C% 	wordsProcessed += 2;
%C% 	if (wc < 0 || wc % 10) { 				// 10 words per event
%C% 		gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong word count", SevtData, SevtWC);
%C% 		cerr	<< setred
%C% 				<< this->ClassName() << "::FillSubevent(): At SevtWC = "
%C% 				<< SevtWC << " (relWC = " << wordsProcessed << ") : Wrong word count - " << wc
%C% 				<< setblack << endl;
%C% 		return(kTRUE);
%C% 	}
%C% 	Int_t moduleNumber = *dataPtr++;		// header word 2: module number
%C% 	if (moduleNumber <= 0) {
%C% 		gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, SevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent(): At SevtWC = "
%C% 						<< SevtWC << " (relWC = " << wordsProcessed
%C% 						<< ") : Wrong module number - " << moduleNumber
%C% 						<< setblack << endl;
%C% 	}
%C%
%C% 	TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
%C% 	if (mle == NULL) {
%C% 		gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, SevtWC);
%C% 		cerr	<< setred
%C% 				<< this->ClassName() << "::FillSubevent(): At SevtWC = "
%C% 				<< SevtWC << " (relWC = " << wordsProcessed << ") : Wrong module number - "
%C% 				<< moduleNumber
%C% 				<< setblack << endl;
%C% 		return(kTRUE);
%C% 	}
%C%
%C% 	mle->IncrEventHits();				// count this event
%C%
%C% 	UShort_t evtData[6];
%C% 	UShort_t timeStamp[3];
%C% 	for (; wc; wc -= 10) {
%C% 		if (moduleNumber > 0) {
%C% 			for (Int_t k = 0; k < 3; k++) timeStamp[k] = *dataPtr++;
%C% 			Int_t tsAux = *dataPtr++;
%C% 			evtData[kHitCounterT1] = *dataPtr++;
%C% 			evtData[kHitCounterT1 + 1] = *dataPtr++;
%C% 			evtData[kHitCounterT2] = *dataPtr++;
%C% 			evtData[kHitCounterT2 + 1] = *dataPtr++;
%C% 			evtData[kHitPattern] = *dataPtr++;
%C% 			evtData[kHitPattern + 1] = *dataPtr++;
%C% 			if (evtData[kHitPattern + 1] & 0x0F00) timeStamp[2] = tsAux;
%C% 			mle->IncrChannelHits(0);			// count this channel
%C% 			this->GetHitBuffer()->AddHit(	eventsProcessed,
%C% 											moduleNumber,
%C% 											0,
%C% 											timeStamp[0],
%C% 											timeStamp[1],
%C% 											timeStamp[2],
%C% 											&evtData,
%C% 											6);
%C% 		}
%C% 		SevtWC -= 10;						// remaining subevent data
%C% 		wordsProcessed += 10;
%C% 	}
%C% 	eventsProcessed++;
%C% }
%C% return(kTRUE);
%C%}
%E%}			
//- dummy prefixes, never used
%VR%
%SS%
%AL%
%XS%
%MD%
%%EndOfCode%%
%%SEVT_FILL_SUBEVENT%%

%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::BookHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::BookHistograms
%BN%// Purpose:        Define histograms for subevent $sevtNameLC
%BN%// Arguments:      
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:     
%BN%// Description:    Dummy. Never used.
%BN%// Keywords:       
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
%BP%Bool_t TUsrSevt$sevtNameUC::Book$evtNameUCHistograms() {
%BP%//________________________________________________________________[C++ METHOD]
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%// Name:           TUsrSevt$sevtNameUC::Book$evtNameUCHistograms
%BP%// Purpose:        Define private histograms for event $evtNameLC
%BP%// Arguments:      
%BP%// Results:        kTRUE/kFALSE
%BP%// Exceptions:     
%BP%// Description:    Dummy. Never used.
%BP%// Keywords:       
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%
%E%	return(kTRUE);
%E%}
//- dummy prefixes, never used
%S%
%X%
%A%
%%EndOfCode%%
%%SEVT_BOOK_HISTOGRAMS%%

%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::BookParams() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name: 		  TUsrSevt$sevtNameUC::BookParams
%B%// Purpose:  	  Fill param list for subevent $sevtNameLC
%B%// Arguments:	  
%B%// Results:  	  kTRUE/kFALSE
%B%// Exceptions:	  
%B%// Description:    Dummy. Never used.
%B%// Keywords: 	  
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%E%	return(kTRUE);
%E%}
//- dummy prefixes, never used
%S%
%X%
%A%
%%EndOfCode%%
%%SEVT_BOOK_PARAMS%%

%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::FillHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::FillHistograms
%BN%// Purpose:        Accumulate histograms for subevent $sevtNameLC
%BN%// Arguments:      
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:     
%BN%// Description:    Dummy. Never used.
%BN%// Keywords:       
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
%BP%Bool_t TUsrSevt$sevtNameUC::Fill$evtNameUCHistograms() {
%BP%//________________________________________________________________[C++ METHOD]
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%// Name:           TUsrSevt$sevtNameUC::Fill$evtNameUCHistograms
%BP%// Purpose:        Accumulate private histograms for event $evtNameLC
%BP%// Arguments:      
%BP%// Results:        kTRUE/kFALSE
%BP%// Exceptions:     
%BP%// Description:    Dummy. Never used.
%BP%// Keywords:       
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%
%E%	return(kTRUE);
%E%}
//- dummy prefixes, never used
%S%
%X%
%A%
%PS%
%PX%
%PA%
%%EndOfCode%%
%%SEVT_FILL_HISTOGRAMS%%

Bool_t TUsrSevt%%SEVT_NAME_UC%%::AddBranch(TTree * Tree) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::AddBranch
// Purpose:        Create a branch for subevent %%SEVT_NAME_LC%%
// Arguments:      TTree * Tree      -- pointer to parent's tree struct
// Results:        kTRUE/kFALSE
// Exceptions:     
// Description:    Calls method TTree::Branch for this subevent.
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

	Int_t bufSize;
	Int_t splitMode;

	if (gMrbAnalyze->TreeToBeWritten()) {
		bufSize = gMrbAnalyze->GetBranchSize();
		splitMode = gMrbAnalyze->GetSplitLevel();
		if (verboseMode) {
			cout	<< this->ClassName() << "::AddBranch(): adding branch \"%%SEVT_NAME_LC%%\" to tree \""
					<< Tree->GetName() << "\" (bufsiz="
					<< bufSize
					<< ", split=" << splitMode << ")"
					<< endl;
		}
		fMyAddr = (TObject *) this; 		// we need a '**' ref to this object
		Tree->Branch( 	"%%SEVT_NAME_LC%%", this->ClassName(),
						&fMyAddr,
						bufSize,
						splitMode);
	}
	return(kTRUE);
}

%%BeginOfCode%%
%LVB%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%LVB%//________________________________________________________________[C++ METHOD]
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%LVB%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%LVB%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%LVB%// Results:        kTRUE/kFALSE
%LVB%// Exceptions:     
%LVB%// Description:    Set branch addresses for ALL data members (leaves)
%LVB%//                 of subevent $sevtNameLC.
%LVB%//                 >> Replay mode only <<
%LVB%// Keywords:       
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%
%LVB%	Tree->GetEntry(0);						// dummy statement to activate branches (?)
%LVB%
%LVS%	Tree->SetBranchAddress("$prefix$paramNameLC", &$paramNameLC);	// $sevtNameLC.$paramNameLC
%LVX%	Tree->SetBranchAddress("$prefix$paramNameLC[$indexRange]", $paramNameLC);	// $sevtNameLC.$paramNameLC
%LVA%	Tree->SetBranchAddress("pData[$nofParams]", fData);
%LVE%	Tree->SetBranchAddress("fTimeStamp", &fTimeStamp);		// (sub)event's time stamp
%LVE%
%LVE%	return(kTRUE);
%LVE%}
%BR%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%BR%//________________________________________________________________[C++ METHOD]
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%BR%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%BR%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%BR%// Results:        kTRUE/kFALSE
%BR%// Exceptions:     
%BR%// Description:    Set branch address for subevent $sevtNameLC.
%BR%//                 Subevent will be fetched from tree AS A WHOLE.
%BR%//                 >> Replay mode only <<
%BR%// Keywords:       
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%
%BR%	fBranch = Tree->GetBranch("$sevtNameLC");
%BR%	fMyAddr = this;
%BR%	fBranch->SetAddress(&fMyAddr);
%BR%
%BR%	return(kTRUE);
%BR%}
%%EndOfCode%%
%%SEVT_INITIALIZE_BRANCH%%

void TUsrSevt%%SEVT_NAME_UC%%::Reset(Int_t InitValue, Bool_t DataOnly) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::Reset
// Purpose:        Reset subevent data
// Arguments:      Int_t InitValue    -- initialization value
//                 Bool_t DataOnly  -- reset data only if kTRUE (ignored)
// Results:        --
// Exceptions:     
// Description:    Dummy. Never used.
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

%%BeginOfCode%%
//- dummy prefixes, never used
%S%
%X%
%A%
%%EndOfCode%%
%%SEVT_RESET_DATA%%
}
