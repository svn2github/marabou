%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name:           TUsrSevt$sevtNameUC::FillSubevent
%B%// Purpose:        Fill local instance of subevent $sevtNameLC with MBS data
%B%// Arguments:      const UShort_t * SevtData   -- pointer to subevent data
%B%//                 Int_t SevtWC                -- word count
%B%//                 Int_t TimeStamp             -- time since last start
%B%//                                                in units of 100 microsecs
%B%// Results:        kTRUE/kFALSE
%B%// Exceptions:     
%B%// Description:    Assigns MBS data to corresponding data members
%B%//                 of subevent $sevtNameLC.
%B%//                 Special version for CAEN V1190 TDCs.
%B%// Keywords:       
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%B%	UShort_t * dataPtr;
%B% Int_t data;
%B%	Int_t * paramAddr;
%B%	Int_t wordsProcessed;
%B%						
%B% static Bool_t checkIfMultiHitAllowed = kTRUE;
%B% static Bool_t allowMultiHit = kFALSE;
%B%
%B% TMrbModuleListEntry * mle;
%B% Int_t moduleNumber;
%B% Int_t evtCount;
%B% Int_t evtId;
%B% Int_t bunchId;
%B% Int_t tdcNumber;
%B% Int_t evtWc;
%B% Int_t tdcWc;
%B% Int_t chn;
%C%
%C%	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
%C%	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event
%C%
%C%	recNo++;						// count this record	
%C% Int_t origSevtWC = SevtWC;				// save original subevent wc
%C% if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
%C%	wordsProcessed = 0; 			// words processed so far
%C% dataPtr = (UShort_t *) SevtData;
%C%
%C% UInt_t expect = CAEN_V1x90_X_GH;			// we expect a global header at beginning
%C% while (SevtWC > 0) {						// subevent may contain several events/tdcs
%C%
%C% 	Int_t data = (*dataPtr++) << 16;		// get next 32 bit word
%C% 	data |= *dataPtr++;
%C% 	SevtWC -= 2;
%C%
%C% 	UInt_t hdrBits = (data >> CAEN_V1x90_SH_HDR_TRL) & CAEN_V1x90_M_HDR_TRL;
%C%
%C% 	// global header
%C% 	if ((expect & CAEN_V1x90_X_GH) != 0) {
%C% 		if (hdrBits == CAEN_V1x90_D_GLOBAL_HDR) {
%C% 			moduleNumber = data & CAEN_V1x90_M_GH_SERIAL;						// extract module number
%C% 			mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
%C% 			if (mle == NULL) {
%C% 				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 						<< wordsProcessed << "] Wrong module number - " << moduleNumber
%C% 						<< setblack << endl;
%C% 				return(kTRUE);
%C% 			}
%C% 			evtCount = (data >> CAEN_V1x90_SH_GH_EVTCNT) & CAEN_V1x90_M_GH_EVTCNT;	// event count
%C% 			evtWc = 1;
%C% 			expect = CAEN_V1x90_X_TH;			// we expect a tdc header now
%C% 			continue;							// global header done
%C% 		} else {
%C% 			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
%C% 			cerr	<< setred
%C% 					<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 					<< wordsProcessed << "] Not a global header - 0x" << setbase(16) << data << setbase(10)
%C% 					<< setblack << endl;
%C% 			return(kTRUE);
%C% 		}
%C% 	// tdc header or global trailer
%C% 	} else if ((expect & (CAEN_V1x90_X_TH | CAEN_V1x90_X_GT)) != 0) {
%C% 		if (hdrBits == CAEN_V1x90_D_TDC_HDR) {
%C% 			evtId = (data >> CAEN_V1x90_SH_TDC_EID) & CAEN_V1x90_M_TDC_EID;
%C% 			bunchId = data & CAEN_V1x90_M_TDC_BID;
%C% 			tdcNumber = (data >> CAEN_V1x90_SH_TDC_NUM) & CAEN_V1x90_M_TDC_NUM;
%C% 			expect = CAEN_V1x90_X_TD | CAEN_V1x90_X_TT;			// we expect tdc data or tdc trailer
%C% 			evtWc++;
%C% 			tdcWc = 1;
%C% 			continue;							// global header done
%C% 		} else if (hdrBits == CAEN_V1x90_D_GLOBAL_TRL) {
%C% 			evtWc++;
%C% 			Int_t wc = (data >> CAEN_V1x90_SH_GT_WC) & CAEN_V1x90_M_GT_WC;
%C% 			if (wc != evtWc) {
%C% 				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong event wc", SevtData, origSevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 						<< wordsProcessed << "] Wrong event word count - " << wc << " (sould be " << evtWc << ")"
%C% 						<< setblack << endl;
%C% 				return(kTRUE);
%C% 			}
%C% 			expect = CAEN_V1x90_X_GH;							// we start over
%C% 			evtWc = 0;
%C% 			continue;
%C% 		} else {
%C% 			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
%C% 			cerr	<< setred
%C% 					<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 					<< wordsProcessed << "] Neither a tdc header nor a global trailer - 0x" << setbase(16) << data << setbase(10)
%C% 					<< setblack << endl;
%C% 			return(kTRUE);
%C% 		}
%C% 	// tdc data or tdc trailer
%C% 	} else if ((expect & (CAEN_V1x90_X_TD | CAEN_V1x90_X_TT)) != 0) {
%C% 		if (hdrBits == CAEN_V1x90_D_TDC_DATA) {
%C% 			chn = (data >> CAEN_V1x90_SH_TDC_CHN) & CAEN_V1x90_M_TDC_CHN;
%C%				paramAddr = (Int_t *) gMrbAnalyze->GetParamAddr(moduleNumber, chn);	// calculate param address
%C%				if (paramAddr) {
%C% 				if (*paramAddr != 0) {
%C% 					if (checkIfMultiHitAllowed) {
%C% 						allowMultiHit = gEnv->GetValue(Form("%s.AllowMultiHit", this->ClassName()), kFALSE);
%C% 						checkIfMultiHitAllowed = kFALSE;
%C% 						if (allowMultiHit) {
%C% 							cerr	<< setred
%C% 									<< this->ClassName() << "::FillSubevent(): Multiple hits detected (no further messages)"
%C% 									<< setblack << endl;
%C% 						}
%C% 					}
%C% 					if (!allowMultiHit) {
%C% 						gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Multiple hit", SevtData, origSevtWC);
%C% 						cerr	<< setred
%C% 								<< this->ClassName() << "::FillSubevent(): [Module "
%C% 								<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
%C% 								<< wordsProcessed << "] Multiple hit for channel " << chn << " - prev data =" << *paramAddr
%C% 								<< setblack << endl;
%C% 					}
%C% 				} else {
%C% 					mle->IncrChannelHits(chn);			// count this channel
%C%						*paramAddr = (Int_t) (data & CAEN_V1x90_M_TDC_DATA);	// assign data value to param
%C% 				}
%C% 			} else {
%C% 				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong param addr", SevtData, origSevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent(): [Module "
%C% 						<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
%C% 						<< wordsProcessed << "] Can't find param addr - module=" << moduleNumber << ", chn=" << chn
%C% 						<< setblack << endl;
%C% 				return(kTRUE);
%C% 			}
%C% 			evtWc++;
%C% 			tdcWc++;
%C% 			expect = CAEN_V1x90_X_TD | CAEN_V1x90_X_TT;			// we expect still tdc data or tdc trailer
%C% 			continue;											// tdc data done
%C% 		} else if (hdrBits == CAEN_V1x90_D_TDC_TRL) {
%C% 			Int_t eid = (data >> CAEN_V1x90_SH_TDC_EID) & CAEN_V1x90_M_TDC_EID;
%C% 			if (eid != evtId) {
%C% 				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong event id", SevtData, origSevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 						<< wordsProcessed << "] Wrong event id in tdc trailer - 0x" << setbase(16) << eid << " (sould be " << evtId << ")" << setbase(10)
%C% 						<< setblack << endl;
%C% 				return(kTRUE);
%C% 			}
%C% 			tdcWc++;
%C% 			Int_t wc = data & CAEN_V1x90_M_TDC_WC;
%C% 			if (wc != tdcWc) {
%C% 				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong tdc wc", SevtData, origSevtWC);
%C% 				cerr	<< setred
%C% 						<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 						<< wordsProcessed << "] Wrong tdc word count - " << wc << " (sould be " << tdcWc << ")"
%C% 						<< setblack << endl;
%C% 				return(kTRUE);
%C% 			}
%C% 			evtWc++;
%C% 			tdcWc = 0;
%C% 			expect = CAEN_V1x90_X_TH | CAEN_V1x90_X_GT;			// we expect a tdc header or a global trailer
%C% 			continue;											// tdc trailer done
%C% 		} else {
%C% 			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong data", SevtData, origSevtWC);
%C% 			cerr	<< setred
%C% 					<< this->ClassName() << "::FillSubevent() [sevtWC="
%C% 					<< wordsProcessed << "] Data out of phase - 0x" << setbase(16) << data << " (expecting tdc data or trailer)" << setbase(10)
%C% 					<< setblack << endl;
%C% 			return(kTRUE);
%C% 		}
%C% 	}
%C% }
%C% return(kTRUE);
%E%}			
//- dummy prefixes, never used
%VR%
%SS%
%SI%
%AL%
%XS%
%XI%
%XL%
%MD%
%%EndOfCode%%
%%SEVT_FILL_SUBEVENT%%

%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::BookHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::BookHistograms
%BN%// Purpose:        Define histograms for subevent $sevtNameLC
%BN%// Arguments:      
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:     
%BN%// Description:    Instantiates histograms for subevent $sevtNameLC.
%BN%//                 Each histogram will be booked only once.
%BN%// Keywords:       
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
%BP%Bool_t TUsrSevt$sevtNameUC::Book$evtNameUCHistograms() {
%BP%//________________________________________________________________[C++ METHOD]
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%// Name:           TUsrSevt$sevtNameUC::Book$evtNameUCHistograms
%BP%// Purpose:        Define private histograms for event $evtNameLC
%BP%// Arguments:      
%BP%// Results:        kTRUE/kFALSE
%BP%// Exceptions:     
%BP%// Description:    Instantiates private histograms for subevent $sevtNameLC
%BP%//                 when used within event $evtNameLC.
%BP%//                 Each histogram will be booked only once.
%BP%// Keywords:       
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%
%S%	if (h$prefix$paramNameUC == NULL) {
%S% 			h$prefix$paramNameUC = new TH1F("h$prefix$paramNameUC", "$sevtNameLC.$paramNameLC", $hBinSize, $hLowerLim.0, $hUpperLim.0);
%S% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC, kMrbModule$moduleNameUC, $paramIndex);
%S% 	}
%X%	for (Int_t i = 0; i < $indexRange; i++) {
%X% 		if (h$prefix$paramNameUC[i] == NULL) {
%X% 			TString hName = Form("h$prefix$paramNameUC%d", i);
%X% 			TString hTitle = Form("$sevtNameLC.$paramNameLC%d", i);
%X% 			h$prefix$paramNameUC[i] = new TH1F(hName.Data(), hTitle.Data(), $hBinSize, $hLowerLim.0, $hUpperLim.0);
%X% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC[i], kMrbModule$moduleNameUC, $paramIndex + i);
%X% 		}
%X% 	}
%A%	if (h$prefix$paramNameUC == NULL) {
%A% 			h$prefix$paramNameUC = new TH1F("h$prefix$paramNameUC", "$sevtNameLC.$paramNameLC", $hBinSize, $hLowerLim.0, $hUpperLim.0);
%A% 			h$prefix$sevtNameUCArray.AddAt(h$prefix$paramNameUC, k$paramNameUC);
%A% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC, kMrbModule$moduleNameUC, $paramIndex);
%A% 	}
%E%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_HISTOGRAMS%%

%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::BookParams() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name: 		  TUsrSevt$sevtNameUC::BookParams
%B%// Purpose:  	  Fill param list for subevent $sevtNameLC
%B%// Arguments:	  
%B%// Results:  	  kTRUE/kFALSE
%B%// Exceptions:	  
%B%// Description:    Generates entries in the list of params.
%B%// Keywords: 	  
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%S% 	if (gMrbAnalyze->FindParam("$paramNameLC") == NULL) gMrbAnalyze->AddParamToList("$paramNameLC", (TObject *) &$paramNameLC, kMrbModule$moduleNameUC, $paramIndex);
%X%	for (Int_t i = 0; i < $indexRange; i++) {
%X% 		TString pName = Form("$paramNameLC%d", i);
%X% 		if (gMrbAnalyze->FindParam(pName.Data()) == NULL) gMrbAnalyze->AddParamToList(pName.Data(), (TObject *) &$paramNameLC[i], kMrbModule$moduleNameUC, $paramIndex + i);
%X% 	}
%A% 	if (gMrbAnalyze->FindParam("$paramNameLC") == NULL) gMrbAnalyze->AddParamToList("$paramNameLC", (TObject *) &fData[k$paramNameUC], kMrbModule$moduleNameUC, $paramIndex);
%E%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_PARAMS%%

%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::FillHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::FillHistograms
%BN%// Purpose:        Accumulate histograms for subevent $sevtNameLC
%BN%// Arguments:      
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:     
%BN%// Description:    Performs add-one to histograms.
%BN%// Keywords:       
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
%BN%// add-one to histograms
%BP%Bool_t TUsrSevt$sevtNameUC::Fill$evtNameUCHistograms() {
%BP%//________________________________________________________________[C++ METHOD]
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%// Name:           TUsrSevt$sevtNameUC::Fill$evtNameUCHistograms
%BP%// Purpose:        Accumulate private histograms for event $evtNameLC
%BP%// Arguments:      
%BP%// Results:        kTRUE/kFALSE
%BP%// Exceptions:     
%BP%// Description:    Performs add-one to histograms.
%BP%// Keywords:       
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%
%BP%
%BP%// add-one to histograms
%S%	h$prefix$paramNameUC->Fill((Axis_t) $paramNameLC);
%X%	for (Int_t i = 0; i < $indexRange; i++) h$prefix$paramNameUC[i]->Fill((Axis_t) $paramNameLC[i]);
%A%	for (Int_t i = k$firstParam; i <= k$lastParam; i++) ((TH1F *) h$prefix$sevtNameUCArray[i])->Fill((Axis_t) fData[i]);
%PS%	if ($paramNameLC > 0) h$prefix$paramNameUC->Fill((Axis_t) $paramNameLC);
%PX%	for (Int_t i = 0; i < $indexRange; i++) {
%PX%		if ($paramNameLC[i] > 0) h$prefix$paramNameUC[i]->Fill((Axis_t) $paramNameLC[i]);
%PX%	}
%PA%	for (Int_t i = k$firstParam; i <= k$lastParam; i++) {
%PA%		if (fData[i] > 0) ((TH1F *) h$prefix$sevtNameUCArray[i])->Fill((Axis_t) fData[i]);
%PA%	}
%E%
%E%	gMrbAnalyze->SetUpdateFlag(); 		// activate update handler
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_FILL_HISTOGRAMS%%

Bool_t TUsrSevt%%SEVT_NAME_UC%%::AddBranch(TTree * Tree) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::AddBranch
// Purpose:        Create a branch for subevent %%SEVT_NAME_LC%%
// Arguments:      TTree * Tree      -- pointer to parent's tree struct
// Results:        kTRUE/kFALSE
// Exceptions:     
// Description:    Calls method TTree::Branch for this subevent.
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

	Int_t bufSize;
	Int_t splitMode;

	if (gMrbAnalyze->TreeToBeWritten()) {
		bufSize = gMrbAnalyze->GetBranchSize();
		splitMode = gMrbAnalyze->GetSplitLevel();
		if (verboseMode) {
			cout	<< this->ClassName() << "::AddBranch(): adding branch \"%%SEVT_NAME_LC%%\" to tree \""
					<< Tree->GetName() << "\" (bufsiz="
					<< bufSize
					<< ", split=" << splitMode << ")"
					<< endl;
		}
		fMyAddr = (TObject *) this; 		// we need a '**' ref to this object
		Tree->Branch( 	"%%SEVT_NAME_LC%%", this->ClassName(),
						&fMyAddr,
						bufSize,
						splitMode);
	}
	return(kTRUE);
}

%%BeginOfCode%%
%LVB%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%LVB%//________________________________________________________________[C++ METHOD]
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%LVB%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%LVB%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%LVB%// Results:        kTRUE/kFALSE
%LVB%// Exceptions:     
%LVB%// Description:    Set branch addresses for ALL data members (leaves)
%LVB%//                 of subevent $sevtNameLC.
%LVB%//                 >> Replay mode only <<
%LVB%// Keywords:       
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%
%LVB%	Tree->GetEntry(0);						// dummy statement to activate branches (?)
%LVB%
%LVS%	Tree->SetBranchAddress("$prefix$paramNameLC", &$paramNameLC);	// $sevtNameLC.$paramNameLC
%LVX%	Tree->SetBranchAddress("$prefix$paramNameLC[$indexRange]", $paramNameLC);	// $sevtNameLC.$paramNameLC
%LVA%	Tree->SetBranchAddress("pData[$nofParams]", fData);
%LVE%	Tree->SetBranchAddress("fTimeStamp", &fTimeStamp);		// (sub)event's time stamp
%LVE%
%LVE%	return(kTRUE);
%LVE%}
%BR%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%BR%//________________________________________________________________[C++ METHOD]
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%BR%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%BR%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%BR%// Results:        kTRUE/kFALSE
%BR%// Exceptions:     
%BR%// Description:    Set branch address for subevent $sevtNameLC.
%BR%//                 Subevent will be fetched from tree AS A WHOLE.
%BR%//                 >> Replay mode only <<
%BR%// Keywords:       
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%
%BR%	fBranch = Tree->GetBranch("$sevtNameLC");
%BR%	fMyAddr = this;
%BR%	fBranch->SetAddress(&fMyAddr);
%BR%
%BR%	return(kTRUE);
%BR%}
%%EndOfCode%%
%%SEVT_INITIALIZE_BRANCH%%

void TUsrSevt%%SEVT_NAME_UC%%::Reset(Int_t InitValue, Bool_t DataOnly) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::Reset
// Purpose:        Reset subevent data
// Arguments:      Int_t InitValue    -- initialization value
//                 Bool_t DataOnly  -- reset data only if kTRUE (ignored)
// Results:        --
// Exceptions:     
// Description:    Initializes subevent data with given value.
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

%%BeginOfCode%%
%S%	$paramNameLC = InitValue;	// $sevtNameLC.$paramNameLC
%X%	for (Int_t i = 0; i < $indexRange; i++) $paramNameLC[i] = InitValue;	// $sevtNameLC.$paramNameLC
%A%	for (Int_t i = k$firstParam; i <= k$lastParam; i++) fData[i] = InitValue;
%%EndOfCode%%
%%SEVT_RESET_DATA%%
}
