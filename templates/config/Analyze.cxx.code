//__________________________________________________[C++ CLASS IMPLEMENTATION]
//////////////////////////////////////////////////////////////////////////////
// Name:           %%ANALYZE_FILE%%.cxx
// Purpose:        Implement user-specific class methods
// Description:    %%ANALYZE_TITLE%%
//
// Header files:   %%ANALYZE_FILE%%.h     -- class definitions
// Author:         %%AUTHOR%%
// Revision:
// Date:           %%CREATION_DATE%%
// URL:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

#define _MARABOU_MAIN_

#define MAX_LLONG	9223372036854775807LL

#include "TEnv.h"

// class definitions
#include "%%ANALYZE_FILE%%.h"

// common index declarations for analysis and readout
#include "%%ANALYZE_NAME_UC%%CommonIndices.h"

#include "SetColor.h"

#include <pthread.h>  // pthread header file

%%BeginOfCode%%
%B%// global defs supplied by user
%I%#include "$iclFile"
%%EndOfCode%%
%%INCLUDE_USER_GLOBALS%%

// global objects
#include "%%ANALYZE_FILE%%Globals.h"

%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%
%B%// namespaces used by user
%NS%using namespace $nameSpace;
%%EndOfCode%%
%%USING_NAMESPACE%%

// implement class defs
%%BeginOfCode%%
ClassImp($className)
%%EndOfCode%%
%%IMPLEMENT_CLASSES%%

extern pthread_mutex_t global_data_mutex;		// global pthread mutex to protect TMapped data

extern TMrbLogger * gMrbLog;					// MARaBOU's logging mechanism

extern TMrbTransport * gMrbTransport;			// base class for MBS transport
extern TMrbAnalyze * gMrbAnalyze;				// base class for user's analysis

%%BeginOfCode%%
extern TUsrEvt$className * g$pointerName;				// $evtTitle
%%EndOfCode%%
%%RESERVED_EVENTS%%
extern TUsrDeadTime * gDeadTime;				// dead-time data

extern TMrbLofUserVars * gMrbLofUserVars;		// list of user vars/wdws

static Bool_t verboseMode;						// verbosity flag;
static Bool_t forcedDump = kFALSE;				// kTRUE -> dump records
static Int_t recNo = 0;

static TArrayI lofModuleIds;

Bool_t TMrbAnalyze::Initialize(TMrbIOSpec * IOSpec) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::Initialize
// Purpose:        Instantiate user objects, initialize values
// Arguments:      TMrbIOSpec * IOSpec  -- i/o specifications
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Instantiates events, histgrams, windows etc. and
//                 initializes values.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	verboseMode = (Bool_t) gEnv->GetValue("TMrbAnalyze.VerboseMode", kFALSE);
	forcedDump = (Bool_t) gEnv->GetValue("TMrbAnalyze.ForcedDump", kFALSE);

%%BeginOfCode%%
// add user's environment defs from file $rcFile
	Bool_t fileOk = this->AddResourcesFromFile("$rcFile");
	if (verboseMode && fileOk) {
		gMrbLog->Out()	<< "Reading user's environment defs from file $rcFile" << endl;
		gMrbLog->Flush(this->ClassName(), "Initialize", setblue);
	}
%%EndOfCode%%
%%ADD_USER_ENV%%

// initialize histogram arrays
%%BeginOfCode%%
%N% 	memset(h$prefix$paramNameUC, 0, $indexRange * sizeof(TH1 *));	// $sevtNameLC.$paramNameLC
%A% 	h$sevtNameUCArray.Expand($nofParams); h$sevtNameUCArray.Clear();	// $sevtNameLC
%A% 	h$sevtNameUCArray.SetName("h$sevtNameUCArray"); gROOT->Append(&h$sevtNameUCArray);
%U% 	$hArrayName.Expand($nofHistos); $hArrayName.Clear();	// user-defined histos in array $hArrayName
%U% 	$hArrayName.SetName("$hArrayName"); gROOT->Append(&$hArrayName);
%%EndOfCode%%
%%HISTO_INIT_ARRAYS%%

%%BeginOfCode%%
%B%// initialize user lists: modules, params & histos
%B% 	gMrbAnalyze->InitializeLists($nofModules, $nofParams);
%B%		lofModuleIds.Set($nofModules);
%ML%	gMrbAnalyze->AddModuleToList("$moduleNameLC", "$moduleTitle", kMrbModule$moduleNameUC, $paramIndex, $nofParams, 0);
%ID%	lofModuleIds[kMrbModule$moduleNameUC] = kMrbModId$moduleType;
%%EndOfCode%%
%%INITIALIZE_LISTS%%

%%BeginOfCode%%
%B%// set time offsets for modules
%B% 	Int_t timeOffset;
%T% 	timeOffset = gEnv->GetValue(gMrbAnalyze->GetResource("Module.$moduleNameUC.TimeOffset"), $timeOffset);	// $moduleNameLC ($moduleTitle)
%T% 	gMrbAnalyze->SetTimeOffset(kMrbModule$moduleNameUC, timeOffset);
%%EndOfCode%%
%%MODULE_TIME_OFFSET%%

	gDirectory = gROOT;

%%BeginOfCode%%
%B%// instantiate event classes and book histograms
%CX%	if (g$pointerName == NULL) {
%C%		g$pointerName = new TUsrEvt$evtNameUC();		// event $evtNameLC, trigger $trigNo
%C% 		Bool_t err = g$pointerName->IsZombie();
%C% 		if (!err) {
%C%			err |= !g$pointerName->BookParams();
%C%			err |= !g$pointerName->BookHistograms();
%HB%			err |= !g$pointerName->AllocHitBuffers();
%E% 		}
%E% 		if (err) {
%E% 			gMrbLog->Err()	<< "Something went wrong while creating event \"$evtNameLC\"" << endl;
%E% 			gMrbLog->Flush(this->ClassName(), "Initialize");
%E% 		}
%EX%	}
%%EndOfCode%%
%%EVT_CLASS_INSTANCE%%

%%BeginOfCode%%
%B%// instantiate user-defined event classes
%C%	if (g$classNameUC == NULL) {		// event $classNameLC
%C%		g$classNameUC = new $classNameUC();
%C% 		Bool_t err = g$classNameUC->IsZombie();
%C% 		if (err) {
%C% 			gMrbLog->Err()	<< "Something went wrong while creating user-defined event \"$classNameLC\"" << endl;
%C% 			gMrbLog->Flush(this->ClassName(), "Initialize");
%C% 		}
%C%	}
%%EndOfCode%%
%%EVT_USER_CLASS_INSTANCE%%

	Double_t cut_x0 = 0.; Double_t cut_y0 = 0.;
%%BeginOfCode%%
// instantiate windows
%1D%	if ($varName == NULL) $varName = new $className("$varName", $varLower, $varUpper);
%2D%	if ($varName == NULL) $varName = new $className("$varName", 1, &cut_x0, &cut_y0);
%%EndOfCode%%
%%WDW_CLASS_INSTANCE%%

%%BeginOfCode%%
// instantiate functions
%1D%	if ($fctName == NULL) $fctName = new $className("$fctName", "[0]*x");
%1D%	gMrbLofUserVars->SetInitialFctType($fctName, kFunction1D);
%2D%	if ($fctName == NULL) $fctName = new $className("$fctName", "[0]*x + [1]*y");
%2D%	gMrbLofUserVars->SetInitialFctType($fctName, kFunction2D);
%%EndOfCode%%
%%FCT_CLASS_INSTANCE%%

%%INITIALIZE_EVT_SEVT_MODS%%

%%BeginOfCode%%
// initialize user code (objects, variables ...) - 1st call *BEFORE* booking histograms
	this->$initialize(IOSpec, kTRUE);
%%EndOfCode%%
%%INCLUDE_USER_INITIALIZE_BEFORE_HB%%

%%BeginOfCode%%
%B%// book histograms defined by user
%UD1%	if ($hName == NULL) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX);
%UD2%	if ($hName == NULL) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX, $binSizeY, $lowerY, $upperY);
%UD3%	if ($hName == NULL) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX, $binSizeY, $lowerY, $upperY, $binSizeZ, $lowerZ, $upperZ);
%UD1C%	if (($hName == NULL) && ($condition)) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX);
%UD2C%	if (($hName == NULL) && ($condition)) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX, $binSizeY, $lowerY, $upperY);
%UD3C%	if (($hName == NULL) && ($condition)) $hName = new $hType("$hName", "$hTitle", $binSizeX, $lowerX, $upperX, $binSizeY, $lowerY, $upperY, $binSizeZ, $lowerZ, $upperZ);
%UDS%	if ($hName == NULL) $hName = new $hType("$hName", "$hTitle", $args);
%UDSC%	if (($hName == NULL) && ($condition)) $hName = new $hType("$hName", "$hTitle", $args);
%%EndOfCode%%
%%HISTO_BOOK_USER_DEFINED%%

%%BeginOfCode%%
%B%// fill histogram arrays
%FHA%	if ($hArrayName.FindObject("$hName") == NULL) $hArrayName.Add($hName);
%%EndOfCode%%
%%HISTO_FILL_ARRAYS%%

%%BeginOfCode%%
// initialize user code (objects, variables ...) - 2nd call *AFTER* booking histograms
	this->$initialize(IOSpec, kFALSE);
%%EndOfCode%%
%%INCLUDE_USER_INITIALIZE_AFTER_HB%%

	return(kTRUE);
}

%%BeginOfCode%%
Bool_t TMrbAnalyze::HandleMessage(const Char_t * Args){
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::HandleMessage
// Purpose:        Execute a message
// Arguments:      Char_t * Args   -- argument list
// Results:        kTRUE/kFALSE
// Description:    Called by message handler.
//                 Format of argument string depends on caller's definitions
//                 and has to be decoded according to his requirements.
// Exceptions:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	return(kFALSE);
};
%%EndOfCode%%
%%HANDLE_MESSAGES%%

%%BeginOfCode%%
Bool_t TMrbAnalyze::ReloadParams(TMrbIOSpec * IOSpec) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::ReloadParams
// Purpose:        Reload parameters from file
// Arguments:      TMrbIOSpec * IOSpec   -- i/o specifications
// Results:        kTRUE/kFALSE
// Description:    Reloads params (vars, wdws, functions etc.) from root file
// Exceptions:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	Bool_t sts = this->ReloadVarsAndWdws(IOSpec);
	this->AdjustWindowPointers();
	this->AdjustFunctionPointers();
	return(sts);
};
%%EndOfCode%%
%%RELOAD_PARAMS%%

%%BeginOfCode%%
Bool_t TMrbAnalyze::FinishRun(TMrbIOSpec * IOSpec, Bool_t BeforeSH) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::FinishRun
// Purpose:        Do some work at end of run
// Arguments:      TMrbIOSpec * IOSpec   -- i/o specifications
//                 Bool_t BeforeSH       -- kTRUE if before saving histos
// Results:        kTRUE/kFALSE
// Description:    User may overwrite this method by his own
// Exceptions:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	return(kTRUE);
};
%%EndOfCode%%
%%FINISH_RUN%%

Bool_t TMrbAnalyze::AdjustWindowPointers() {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::AdjustWindowPointers
// Purpose:        Adjust pointers to windows after reload
// Arguments:      --
// Results:        kTRUE/kFALSE
// Description:    Update pointers to windows (2-dim only).
// Exceptions:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

%%BeginOfCode%%
%1D%	$varName = ($className *) gMrbLofUserVars->Find("$varName");
%1D%	if ($varName == NULL) {
%1D%		gMrbLog->Err()	<< "Not in list of windows - $varName" << endl;
%1D%		gMrbLog->Flush(this->ClassName(), "AdjustWindowPointers");
%1D%	}
%2D%	$varName = ($className *) gMrbLofUserVars->Find("$varName");
%2D%	if ($varName == NULL) {
%2D%		gMrbLog->Err()	<< "Not in list of windows - $varName" << endl;
%2D%		gMrbLog->Flush(this->ClassName(), "AdjustWindowPointers");
%2D%	}
%%EndOfCode%%
%%WDW_ADJUST_POINTERS%%
	return(kTRUE);
};

Bool_t TMrbAnalyze::AdjustFunctionPointers() {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::AdjustFunctionPointers
// Purpose:        Adjust pointers to functions after reload
// Arguments:      --
// Results:        kTRUE/kFALSE
// Description:    Update pointers to functions (TF1 and TF2).
// Exceptions:
// Keywords:
//////////////////////////////////////////////////////////////////////////////

%%BeginOfCode%%
%1D%	$fctName = ($className *) gMrbLofUserVars->Find("$fctName");
%1D%	if ($fctName == NULL) {
%1D%		gMrbLog->Err()	<< "Not in list of functions - $fctName" << endl;
%1D%		gMrbLog->Flush(this->ClassName(), "AdjustFunctionPointers");
%1D%	}
%2D%	$fctName = ($className *) gMrbLofUserVars->Find("$fctName");
%2D%	if ($fctName == NULL) {
%2D%		gMrbLog->Err()	<< "Not in list of functions - $fctName" << endl;
%2D%		gMrbLog->Flush(this->ClassName(), "AdjustFunctionPointers");
%2D%	}
%%EndOfCode%%
%%FCT_ADJUST_POINTERS%%
	return(kTRUE);
};

Bool_t TMrbAnalyze::WriteRootTree(TMrbIOSpec * IOSpec) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::WriteRootTree
// Purpose:        Open a file to write raw data to tree
// Arguments:      TMrbIOSpec * IOSpec   -- i/o specifications
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Opens a ROOT file and creates trees.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	TString rootFile;

	if ((IOSpec->GetOutputMode() & TMrbIOSpec::kOutputOpen) == 0) return(kTRUE);

	if (fWriteRootTree) {
		gMrbLog->Err()	<< "ROOT file already open - " << fRootFileOut->GetName() << endl;
		gMrbLog->Flush(this->ClassName(), "WriteRootTree");
		return(kFALSE);
	}

	rootFile = IOSpec->GetOutputFile();

	if (verboseMode) {
		gMrbLog->Out()	<< "Opening ROOT file \"" << rootFile << "\"" << endl;
		gMrbLog->Flush(this->ClassName(), "WriteRootTree");
	}

	fRootFileOut = new TFile(rootFile.Data(), "RECREATE", "%%ANALYZE_TITLE%%");
	fRootFileOut->SetCompressionLevel(1);
	fWriteRootTree = kTRUE;

// create trees for start/stop info
	gStartEvent->CreateTree();
	gStopEvent->CreateTree();

// create tree to hold dead-time data
	gDeadTime->CreateTree();

// create ROOT trees for each user event
%%BeginOfCode%%
%E% 	g$pointerName->CreateTree();
%U% 	g$classNameUC->CreateTree();
%%EndOfCode%%
%%EVT_CREATE_TREE%%

// control output of tree data individually for each event
%%BeginOfCode%%
%E% 	g$pointerName->WriteTree(gEnv->GetValue(gMrbAnalyze->GetResource("Event.$evtNameUC.WriteTree"), kTRUE));
%E% 	if (!g$pointerName->TreeToBeWritten()) {
%E% 		gMrbLog->Wrn()	<< "Output of tree data TURNED OFF for event \"$evtNameLC\"" << endl;
%E% 		gMrbLog->Flush(this->ClassName(), "WriteRootTree");
%E% 	}
%U% 	g$classNameUC->WriteTree(gEnv->GetValue(gMrbAnalyze->GetResource("Event.$classNameUC.WriteTree"), kTRUE));
%U% 	if (!g$classNameUC->TreeToBeWritten()) {
%U% 		gMrbLog->Wrn()	<< "Output of tree data TURNED OFF for event \"$classNameLC\"" << endl;
%U% 		gMrbLog->Flush(this->ClassName(), "WriteRootTree");
%U% 	}
%%EndOfCode%%
%%EVT_SET_WRITE_TREE%%

	return(kTRUE);
}

Bool_t TMrbAnalyze::OpenRootFile(TMrbIOSpec * IOSpec) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::OpenRootFile
// Purpose:        Open a file to replay tree data
// Arguments:      TMrbIOSpec * IOSpec    -- i/o specifications
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Opens a ROOT file for input.
//                 Replay mode only.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	TString rootFile;

	if ((IOSpec->GetInputMode() & TMrbIOSpec::kInputRoot) == 0) return(kTRUE);

	if (fRootFileIn != NULL) {
		gMrbLog->Err()	<< "ROOT file already open - " << fRootFileIn->GetName() << endl;
		gMrbLog->Flush(this->ClassName(), "OpenRootFile");
		return(kFALSE);
	}

	rootFile = IOSpec->GetInputFile();

	if (rootFile.CompareTo("fake.root") == 0) {
		this->SetFakeMode();
// set fake mode for all trees
%%BeginOfCode%%
%E% 		g$evtNameUC->SetFakeMode();
%U% 		g$classNameUC->SetFakeMode();
%%EndOfCode%%
%%EVT_SET_FAKE_MODE%%
		if (verboseMode) {
			gMrbLog->Out()	<< "Running in FAKE mode" << endl;
			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
		}
	} else {
		gSystem->ExpandPathName(rootFile);
		if(gSystem->AccessPathName(rootFile, kFileExists)){
			gMrbLog->Err()	<< "No such file - " << rootFile << endl;
			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
			return(kFALSE);
		}
		fRootFileIn = new TFile(rootFile.Data(), "READ");
		if (fRootFileIn->IsZombie() || !fRootFileIn->IsOpen()) {
			gMrbLog->Err()	<< "Can't open ROOT file - " << rootFile << endl;
			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
			return(kFALSE);
		} else if (verboseMode) {
			gMrbLog->Out()	<< "Opening ROOT file \"" << rootFile << "\"" << endl;
			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
		}

// initialize ROOT trees
%%BeginOfCode%%
%E% 		g$evtNameUC->InitializeTree(fRootFileIn);
%U% 		g$classNameUC->InitializeTree(fRootFileIn);
%%EndOfCode%%
%%EVT_INITIALIZE_TREE%%

// initialize trees containing start/stop information
		gStartEvent->InitializeTree(fRootFileIn);
		gStopEvent->InitializeTree(fRootFileIn);

// initialize dead-time tree
		gDeadTime->InitializeTree(fRootFileIn);

// turn on replay mode
		fReplayMode = kTRUE;
%%BeginOfCode%%
%E% 		g$evtNameUC->SetReplayMode(gEnv->GetValue(gMrbAnalyze->GetResource("Event.$evtNameUC.ReplayMode"), kTRUE));
%E% 		if (!g$evtNameUC->IsReplayMode()) {
%E% 			gMrbLog->Wrn()	<< "Replay of tree data TURNED OFF for event \"$evtNameLC\"" << endl;
%E% 			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
%E% 		}
%U% 		g$classNameUC->SetReplayMode(gEnv->GetValue(gMrbAnalyze->GetResource("Event.$classNameUC.ReplayMode"), kTRUE));
%U% 		if (!g$classNameUC->IsReplayMode()) {
%U% 			gMrbLog->Wrn()	<< "Replay of tree data TURNED OFF for event \"$classNameLC\"" << endl;
%U% 			gMrbLog->Flush(this->ClassName(), "OpenRootFile");
%U% 		}
%%EndOfCode%%
%%EVT_SET_REPLAY_MODE%%
	}
	return(kTRUE);
}

Bool_t TMrbAnalyze::ReplayEvents(TMrbIOSpec * IOSpec) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::ReplayEvents
// Purpose:        Read data from ROOT file
// Arguments:      TMrbIOSpec * IOSpec  -- i/o specifications
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Replays event data.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	Bool_t sts;

	if (!this->IsFakeMode()) {
		if (fRootFileIn == NULL) {
			gMrbLog->Err()	<< "No ROOT file open" << endl;
			gMrbLog->Flush(this->ClassName(), "ReplayEvents");
			return(kFALSE);
		}

// output start/stop time stamps
		this->PrintStartStop();
	}

// replay tree data for each event with replay mode turned-on
	sts = kTRUE;
%%BeginOfCode%%
%E% if (g$evtNameUC->IsReplayMode()) {
%E% 	if (!g$evtNameUC->ReplayTreeData(IOSpec)) sts = kFALSE;
%E% }
%U% if (g$classNameUC->IsReplayMode()) {
%U% 	if (!g$classNameUC->ReplayTreeData(IOSpec)) sts = kFALSE;
%U% }
%%EndOfCode%%
%%EVT_REPLAY_TREE%%

	return(sts);
}

void TMrbAnalyze::SetScaleDown(Int_t ScaleDown) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbAnalyze::SetScaleDown
// Purpose:        Set a scale-down value common to all events
// Arguments:      Int_t ScaleDown    -- scale-down factor
// Results:
// Exceptions:
// Description:    Defines a global scale-down factor valid for all events.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	fScaleDown = ScaleDown;

// set scale down individually for each event
%%BeginOfCode%%
%E% 	g$evtNameUC->SetScaleDown(ScaleDown);
%U% 	g$classNameUC->SetScaleDown(ScaleDown);
%%EndOfCode%%
%%EVT_SET_SCALEDOWN%%
}

%%SEVT_CLASS_METHODS%%					include SUBEVENT methods here

%%EVT_CLASS_METHODS%%					include EVENT methods here

%%EVT_USER_CLASS_METHODS%%				include methods for user-defined event classes here

Bool_t TMrbTransport::ProcessEvent(s_vehe * EventData) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbTransport::ProcessEvent
// Purpose:        Process event data
// Arguments:      s_vehe * EventData  -- pointer to event data (including header)
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    This is the event filling function.
//                 User has to define how to process this event.
//                 Default is via method Analyze().
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	MBSDataIO * BaseAddr; 		// base addr of MBS data
	Bool_t sts;

	if (!gMrbAnalyze->TestRunStatus()) return(kFALSE);		// run is stopped (maybe after pausing)

	gMrbAnalyze->ResetEventsPerTrigger();		// clear event count for all modules

	BaseAddr = GetMbsBase();			// fetch base addr

	switch (EventData->i_trigger) {		// dispatch according to trigger number
%%BeginOfCode%%
%B%		case kMrbTrigger$evtNameUC:		// event $evtNameLC, trigger $trigNo
%B%			pthread_mutex_lock(&global_data_mutex);
%B%			g$evtNameUC->FillEvent(EventData, BaseAddr);
%P%			sts = g$evtNameUC->$processEvent(0);
%E%			pthread_mutex_unlock(&global_data_mutex);
%E%			return(kTRUE);
%%EndOfCode%%
%%EVT_DISPATCH_OVER_TRIGGER%%

%%BeginOfCode%%
%C%		case $trigNo:					// ignore trigger $trigNo
%E%			return(kTRUE);
%%EndOfCode%%
%%EVT_IGNORE_TRIGGER%%

%%BeginOfCode%%
%B%		case kMrbTriggerStartAcquisition:					// start acquisition (trigger 14)
%N%			gStartEvent->ExtractTimeStamp(EventData, BaseAddr);
%N%			gStartEvent->Print("START Acquisition");
%SF%			gStartEvent->FillEvent(EventData, BaseAddr);
%SF%			gStartEvent->Print("START Acquisition");
%SP%			sts = gStartEvent->$processEvent(0);
%E%			gMrbAnalyze->SetRunStatus(TMrbAnalyze::M_RUNNING);
%E%			return(kTRUE);
%%EndOfCode%%
%%EVT_TRIGGER_START_ACQUISITION%%

%%BeginOfCode%%
%B%		case kMrbTriggerStopAcquisition:					// stop acquisition (trigger 15)
%N%			gStopEvent->ExtractTimeStamp(EventData, BaseAddr);
%N%			gStopEvent->Print("STOP Acquisition");
%SF%			gStopEvent->FillEvent(EventData, BaseAddr);
%SF%			gStopEvent->Print("STOP Acquisition");
%SP%			sts = gStopEvent->$processEvent(0);
%E%			gMrbAnalyze->SetRunStatus(TMrbAnalyze::M_STOPPING);
%E%			return(kFALSE);
%%EndOfCode%%
%%EVT_TRIGGER_STOP_ACQUISITION%%

		default:
			gMrbLog->Err()	<< "Illegal trigger number - #" << EventData->i_trigger << endl;
			gMrbLog->Flush(this->ClassName(), "ProcessEvent");
			return(kFALSE);
	}
	return(kTRUE);
}

%%BeginOfCode%%
// dummy methods if user extensions are not activated
%I%Bool_t TMrbAnalyze::InitializeUserCode(TMrbIOSpec * IOSpec, Bool_t BeforeHB) { return(kFALSE); };
%%EndOfCode%%
%%INCLUDE_DUMMY_METHODS%%

Bool_t UnpackInitialize(const Char_t * RootFile) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           UnpackInitialize
// Purpose:        Initialize unpacker
// Arguments:      Char_t * RootFile     -- name of root file containing tree
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Initialize unpacking and open root file
//                 (to be used in offline analysis only)
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	if (gMrbAnalyze == NULL) {
		TMrbIOSpec * io = new TMrbIOSpec();
		gMrbAnalyze = new TMrbAnalyze(io);			// init analysis specific for current setup
	}
	if (!gMrbAnalyze->OpenRootFile(RootFile)) return kFALSE;		// open root file, setup tree
	return kTRUE;
}

