%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::BookHistograms() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name:           TUsrSevt$sevtNameUC::BookHistograms
%B%// Purpose:        Define histograms for subevent $sevtNameLC
%B%// Arguments:      
%B%// Results:        kTRUE/kFALSE
%B%// Exceptions:     
%B%// Description:    Instantiates histograms for subevent $sevtNameLC
%B%//                 depending on trigger mode:
%B%//                 1 histo per channel if in normal sample mode,
%B%//                 2 histos if in FIR mode
%B%//                 
%B%// Keywords:       
%B%//////////////////////////////////////////////////////////////////////////////
%CB%
%ST%	h$paramNameUC$type = new TH2S("h$paramNameUC$type", "$paramNameLC $xtype", $xBins, $xMin.0, $xMax.0, $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCSS = new TH2S("h$paramNameUCSS", "$paramNameLC short shaped", $xBins, $xMin.0, $xMax.0, $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCLS = new TH2S("h$paramNameUCLS", "$paramNameLC long shaped", $xBins, $xMin.0, $xMax.0, $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCMinMin = new TH2S("h$paramNameUCMinMin", "$paramNameLC shaper min/max", $yBins, $yMin.0, $yMax.0, $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCMaxMax = new TH2S("h$paramNameUCMaxMax", "$paramNameLC shaper min/max", $yBins, $yMin.0, $yMax.0, $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCSSMin = new TH1F("h$paramNameUCSSMin", "$paramNameLC shaper min", $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCSSMax = new TH1F("h$paramNameUCSSMax", "$paramNameLC shaper max", $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCLSMin = new TH1F("h$paramNameUCLSMin", "$paramNameLC shaper min", $yBins, $yMin.0, $yMax.0);
%SH%	h$paramNameUCLSMax = new TH1F("h$paramNameUCLSMax", "$paramNameLC shaper max", $yBins, $yMin.0, $yMax.0);
%CE%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_HISTOGRAMS%%

%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::BookParams() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name: 		  TUsrSevt$sevtNameUC::BookParams
%B%// Purpose:  	  Fill param list for subevent $sevtNameLC
%B%// Arguments:	  
%B%// Results:  	  kTRUE/kFALSE
%B%// Exceptions:	  
%B%// Description:    Generates entries in the list of params.
%B%//                 1 entry per channel in normal sample mode,
%B%//                 2 entries in FIR mode.
%B%// Keywords: 	  
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%B% 	memset(fChanData, sizeof(fChanData), 0);
%B% 	memset(fShapedData, sizeof(fShapedData), 0);
%CB%	if (gMrbAnalyze->FindParam("$paramNameLC$type") == NULL) {
%ST% 		gMrbAnalyze->AddParamToList("$paramNameLC$type", (TObject *) $paramNameLC$type, kMrbModule$moduleNameUC, $paramIndex);
%ST% 		fChanData[$chnIndex] = $paramNameLC$type;
%ST% 		fDataSize[$chnIndex] = $pageSize;
%ST% 		fPageSize[$chnIndex] = $pageSize;
%SH%		fShapedData[$chnIndex] = $paramNameLCSS;
%SH%		fShapedData[kNofChannels + $chnIndex] = $paramNameLCLS;
%CE% 	}
%E%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_PARAMS%%

%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::FillHistograms() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name:           TUsrSevt$sevtNameUC::FillHistograms
%B%// Purpose:        Accumulate histograms for subevent $sevtNameLC
%B%// Arguments:      
%B%// Results:        kTRUE/kFALSE
%B%// Exceptions:     
%B%// Description:    Accumulates histos in multiscaling mode
%B%// Keywords:       
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%CB%	if (!this->IsEmpty()) {
%ST% 		for (Int_t i = 0; i < $pageSize; i++) h$paramNameUC$type->Fill((Axis_t) i, (Axis_t) $paramNameLC$type[i]);
%SH% 		for (Int_t i = 0; i < $pageSize; i++) h$paramNameUCSS->Fill((Axis_t) i, (Axis_t) $paramNameLCSS[i]);
%SH% 		for (Int_t i = 0; i < $pageSize; i++) h$paramNameUCLS->Fill((Axis_t) i, (Axis_t) $paramNameLCLS[i]);
%SH% 		h$paramNameUCMinMin->Fill((Axis_t) fShapeMin[kNofChannels + $chnIndex], (Axis_t) fShapeMin[$chnIndex]);
%SH% 		h$paramNameUCMaxMax->Fill((Axis_t) fShapeMax[kNofChannels + $chnIndex], (Axis_t) fShapeMax[$chnIndex]);
%SH% 		h$paramNameUCSSMin->Fill((Axis_t) (Axis_t) fShapeMin[$chnIndex]);
%SH% 		h$paramNameUCSSMax->Fill((Axis_t) (Axis_t) fShapeMax[$chnIndex]);
%SH% 		h$paramNameUCLSMin->Fill((Axis_t) (Axis_t) fShapeMin[kNofChannels + $chnIndex]);
%SH% 		h$paramNameUCLSMax->Fill((Axis_t) (Axis_t) fShapeMax[kNofChannels + $chnIndex]);
%CE%	}
%E%	gMrbAnalyze->SetUpdateFlag(); 		// activate update handler
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_FILL_HISTOGRAMS%%

Bool_t TUsrSevt%%SEVT_NAME_UC%%::AddBranch(TTree * Tree) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::AddBranch
// Purpose:        Create a branch for subevent %%SEVT_NAME_LC%%
// Arguments:      TTree * Tree      -- pointer to parent's tree struct
// Results:        kTRUE/kFALSE
// Exceptions:     
// Description:    Calls method TTree::Branch for this subevent.
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

	Int_t bufSize;
	Int_t splitMode;

	if (gMrbAnalyze->TreeToBeWritten()) {
		bufSize = gMrbAnalyze->GetBranchSize();
		splitMode = gMrbAnalyze->GetSplitLevel();
		if (verboseMode) {
			cout	<< this->ClassName() << "::AddBranch(): adding branch \"%%SEVT_NAME_LC%%\" to tree \""
					<< Tree->GetName() << "\" (bufsiz="
					<< bufSize
					<< ", split=" << splitMode << ")"
					<< endl;
		}
		fMyAddr = (TObject *) this; 		// we need a '**' ref to this object
		Tree->Branch( 	"%%SEVT_NAME_LC%%", this->ClassName(),
						&fMyAddr,
						bufSize,
						splitMode);
	}
	return(kTRUE);
}

%%BeginOfCode%%
%LVB%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%LVB%//________________________________________________________________[C++ METHOD]
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%LVB%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%LVB%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%LVB%// Results:        kTRUE/kFALSE
%LVB%// Exceptions:     
%LVB%// Description:    Set branch addresses for ALL data members (leaves)
%LVB%//                 of subevent $sevtNameLC.
%LVB%//                 >> Replay mode only <<
%LVB%// Keywords:       
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%
%LVB%	Tree->GetEntry(0);						// dummy statement to activate branches (?)
%LVB%
%LVS%	Tree->SetBranchAddress("$prefix$paramNameLC", &$paramNameLC);	// $sevtNameLC.$paramNameLC
%LVX%	Tree->SetBranchAddress("$prefix$paramNameLC[$indexRange]", $paramNameLC);	// $sevtNameLC.$paramNameLC
%LVA%	Tree->SetBranchAddress("pData[$nofParams]", fData);
%LVE%	Tree->SetBranchAddress("fTimeStamp", &fTimeStamp);		// (sub)event's time stamp
%LVE%
%LVE%	return(kTRUE);
%LVE%}
%BR%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%BR%//________________________________________________________________[C++ METHOD]
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%BR%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%BR%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%BR%// Results:        kTRUE/kFALSE
%BR%// Exceptions:     
%BR%// Description:    Set branch address for subevent $sevtNameLC.
%BR%//                 Subevent will be fetched from tree AS A WHOLE.
%BR%//                 >> Replay mode only <<
%BR%// Keywords:       
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%
%BR%	fBranch = Tree->GetBranch("$sevtNameLC");
%BR%	fMyAddr = this;
%BR%	fBranch->SetAddress(&fMyAddr);
%BR%
%BR%	return(kTRUE);
%BR%}
%%EndOfCode%%
%%SEVT_INITIALIZE_BRANCH%%
