%%BeginOfCode%%

Bool_t TMrbSubevent_Madc::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Madc::FillSubevent
// Purpose: 	   Decode MADC32 buffer
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:
// Description:    Decodes data from a Mesytec MADC32.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event
	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record
	Int_t origSevtWC = SevtWC;				// save original subevent wc
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several madc modules
		Int_t header = (*dataPtr++ << 16);
		header |= *dataPtr++;
		if (header == 0xaffec0c0) {
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): Data not ready (affec0c0) - restart"
					<< setblack << endl;
			return(kTRUE);
		}
		if ((header & MADC_M_ID) != MADC_D_HDR) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong header - 0x" << setbase(16) << header << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}

		Int_t moduleNumber = (header >> MADC_SH_SERIAL) & MADC_M_SERIAL;	// extract module id
		Int_t res = (header >> MADC_SH_RES) & MADC_M_RES;					// extract adc resolution
		UInt_t dmask = MADC_M_RES2K;
		if (res >= kMrbMadcRes4k) dmask = MADC_M_RES4K;
		if (res >= kMrbMadcRes8k) dmask = MADC_M_RES8K;

		Int_t wc = header & MADC_M_WC;							// extract wc
		Int_t wcs = (wc + 1) * 2; 								// wc + header

		UShort_t * trailPtr = dataPtr + 2 * (wc - 2);

		UInt_t highTimeStamp = (*trailPtr++ << 16);		// possibly extended timestamp
		highTimeStamp |= *trailPtr++;

		Int_t trailer = (*trailPtr++ << 16); 	// inspect trailer word
		trailer |= *trailPtr++;

		Bool_t hasTrailer = kTRUE;

		if ((trailer & MADC_M_ID) == MADC_D_HDR) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "HDR instead of EOE", SevtData, origSevtWC);
			cerr	<< setmagenta
					<< this->ClassName() << "::FillSubevent(): [Module "
					<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
					<< wordsProcessed << "] Expecting EOE, found HDR instead - 0x" << setbase(16) << trailer << setbase(10)
					<< setblack << endl;
			hasTrailer = kFALSE;
			wc--;				// trailer missing
			wcs -= 2;
		} else if ((trailer & MADC_M_ID) != MADC_D_EOE) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong EOE", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): [Module "
					<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
					<< wordsProcessed << "] Wrong EOE - 0x" << setbase(16) << trailer << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		wc--;								// - trailer word

		Bool_t xts = kFALSE;
		ULong64_t ts64 = 0;

		if ((highTimeStamp & MADC_M_XTS) == MADC_D_XTS) {
			ts64 = ((Long64_t) (highTimeStamp & MADC_M_TSHIGH)) << 30;
			wc--;							// - extended ts
			xts = kTRUE;
		}

		UInt_t lowTimeStamp = hasTrailer ? (trailer & MADC_M_TSLOW) : 0;	// extract lower bits of time stamp (bits 0-29)
		ts64 |= lowTimeStamp;

		UShort_t tsArr[3];
		for (Int_t t = 2; t >= 0; t--) {
			tsArr[t] = ts64 & 0xFFFF;
			ts64 >>= 16;
		}

		TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
		if (mle == NULL) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}

		mle->IncrEventHits();				// count this event

		UShort_t evtData[2];
		for (; wc; wc--) {
			Int_t data = (*dataPtr++ << 16);
			data |= *dataPtr++;
			if ((data & MADC_M_ID) != MADC_D_DATA) {
				if ((data & MADC_M_XTS) == MADC_D_XTS) continue;
				if ((data & MADC_M_ID) == MADC_D_EOE) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Unexpected EOE", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent(): [Module "
							<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC=" << wordsProcessed
							<< "] Unexpected EOB - remaining wc=" << wc << " ignored. Continuing with next event."
							<< setblack << endl;
					dataPtr -= 2;
					wcs -= wc;
					break;
				} else {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong data", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent(): [Module "
							<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
							<< wordsProcessed << "] Wrong data - 0x" << setbase(16) << data << setbase(10)
							<< setblack << endl;
					return(kTRUE);
				}
			}
			Int_t chn = (data >> MADC_SH_CHN) & MADC_M_CHN;
			mle->IncrChannelHits(chn);			// count this channel
			evtData[0] = 0;
			evtData[1] = (UShort_t) (data & dmask);
			TUsrHit * hit = this->GetHitBuffer()->AddHit(	eventsProcessed,
											moduleNumber,
											chn,
											tsArr,
											evtData, 2);
			if (hit == NULL) {
				cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Error while filling hitbuffer - giving up"
					<< setblack << endl;
				return(kTRUE);
			}
		}

		if (xts) dataPtr += 2;				// compensate for extended ts
		if (hasTrailer) dataPtr += 2;		// and for trailer

		SevtWC -= wcs;						// remaining subevent data
		wordsProcessed += wcs;
		eventsProcessed++;
	}
	return(kTRUE);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%


%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
