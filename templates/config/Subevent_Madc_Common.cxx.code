%%BeginOfCode%%
Bool_t TMrbSubevent_Madc32::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Sis::FillSubevent
// Purpose: 	   Decode Mesytec MADC32 data
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:     
// Description:    Decodes data from a MADC32 module
// Keywords:	   
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record	
	Int_t origSevtWC = SevtWC;
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several modules
		UShort_t header = *dataPtr++;							 // header word
		if ((header & kMrbSevt_10_12_B_Header) == 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong header - 0x" << setbase(16) << header << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		Int_t wc = *dataPtr++;							 // word count
		Int_t wcs = wc;
		if (wc <= 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong word count", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): [sevtWC="
					<< wordsProcessed << "] Wrong word count - " << wc << setblack << endl;
			return(kTRUE);
		}
		Int_t moduleNumber = header & kMrbSevt_10_12_M_ModuleNumber;  // extract module number
		TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
		if (mle == NULL) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}

		Int_t moduleID = (header >> kMrbSevt_10_12_SH_ModuleId) & kMrbSevt_10_12_M_ModuleId;
		SevtWC -= wcs;
		wordsProcessed += wcs;
	}
	return(kTRUE);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%

		
%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
