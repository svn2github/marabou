%%BeginOfCode%%
Bool_t TMrbSubevent_Sis::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Sis::FillSubevent
// Purpose: 	   Decode SIS data
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:     
// Description:    Decodes data from a SIS 3XXX.
// Keywords:	   
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record	
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several SIS modules
		UShort_t header = *dataPtr++;							 // header word
		if ((header & kMrbSevt_10_12_B_Header) == 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, SevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): At SevtWC = "
					<< SevtWC << " (relWC = " << wordsProcessed
					<< ") : Wrong header - 0x" << setbase(16) << header << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		Int_t wc = *dataPtr++;							 // word count
		Int_t wcs = wc;
		if (wc <= 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong word count", SevtData, SevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): At SevtWC = "
					<< SevtWC << " (relWC = " << wordsProcessed << ") : Wrong word count - " << wc
					<< setblack << endl;
			return(kTRUE);
		}
		Int_t moduleNumber = header & kMrbSevt_10_12_M_ModuleNumber;  // extract module number
		if (moduleNumber <= 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, SevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): At SevtWC = "
					<< SevtWC << " (relWC = " << wordsProcessed
					<< ") : Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}
		
		Int_t moduleID = (header >> kMrbSevt_10_12_SH_ModuleId) & kMrbSevt_10_12_M_ModuleId;
		Bool_t sis3801 = (moduleID == (kMrbModIdSis_3801 & kMrbSevt_10_12_M_ModuleId));
		wc -= 2;				 // count for header words
		UShort_t evtData[2];
		for (; wc; wc-=2) {		 // 2 words per channel
			Int_t chn;
			Int_t data = (*dataPtr++) << 16; 			 // channel
			data |= *dataPtr++;					 // data
			if (sis3801) {
				chn = (data >> 24) & 0xFF;		// SIS 3801: chn number in bits 31..24
				data &= 0xFFFFFF;				// 24 bit data
			} else {
				chn = 0;						// SIS 3600: 1 channel only
			}
			evtData[0] = 0;
			evtData[1] = data;
			this->GetHitBuffer()->AddHit(	eventsProcessed,
													moduleNumber,
													chn,
													NULL,
													evtData, 2);
			eventsProcessed++;
		}
		SevtWC -= wcs;
		wordsProcessed += wcs;
	}
	return(kTRUE);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%

		
%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
