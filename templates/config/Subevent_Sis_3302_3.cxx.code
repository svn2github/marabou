%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::BookHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::BookHistograms
%BN%// Purpose:        Define histograms for subevent $sevtNameLC
%BN%// Arguments:
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:
%BN%// Description:    Instantiates histograms for subevent $sevtNameLC.
%BN%//                 Each histogram will be booked only once.
%BN%// Keywords:
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
%BP%Bool_t TUsrSevt$sevtNameUC::Book$evtNameUCHistograms() {
%BP%//________________________________________________________________[C++ METHOD]
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%// Name:           TUsrSevt$sevtNameUC::Book$evtNameUCHistograms
%BP%// Purpose:        Define private histograms for event $evtNameLC
%BP%// Arguments:
%BP%// Results:        kTRUE/kFALSE
%BP%// Exceptions:
%BP%// Description:    Instantiates private histograms for subevent $sevtNameLC
%BP%//                 when used within event $evtNameLC.
%BP%//                 Each histogram will be booked only once.
%BP%// Keywords:
%BP%//////////////////////////////////////////////////////////////////////////////
%BP%
%S%	if (h$prefix$paramNameUC == NULL) {
%S% 			h$prefix$paramNameUC = new TH1F("h$prefix$paramNameUC", "$sevtNameLC.$paramNameLC", $hBinSize, $hLowerLim.0, $hUpperLim.0);
%S% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC, kMrbModule$moduleNameUC, $paramIndex);
%S% 	}
%X%	for (Int_t i = 0; i < $indexRange; i++) {
%X% 		if (h$prefix$paramNameUC[i] == NULL) {
%X% 			TString hName = Form("h$prefix$paramNameUC%d", i);
%X% 			TString hTitle = Form("$sevtNameLC.$paramNameLC%d", i);
%X% 			h$prefix$paramNameUC[i] = new TH1F(hName.Data(), hTitle.Data(), $hBinSize, $hLowerLim.0, $hUpperLim.0);
%X% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC[i], kMrbModule$moduleNameUC, $paramIndex + i);
%X% 		}
%X% 	}
%XNB%	Char_t * pn[] = { $pnList };
%XN%	for (Int_t i = 0; i < $indexRange; i++) {
%XN% 		if (h$prefix$paramNameUC[i] == NULL) {
%XN%			TString pnUC = pn[i];
%XN%			pnUC(0,1).ToUpper();
%XN% 			TString hName = Form("h$prefix%s", pnUC.Data());
%XN% 			TString hTitle = Form("$sevtNameLC.$paramNameLC[%d] - %s", i, pn[i]);
%XN% 			h$prefix$paramNameUC[i] = new TH1F(hName.Data(), hTitle.Data(), $hBinSize, $hLowerLim.0, $hUpperLim.0);
%XN% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC[i], kMrbModule$moduleNameUC, $paramIndex + i);
%XN% 		}
%XN% 	}
%A%	if (h$prefix$paramNameUC == NULL) {
%A% 			h$prefix$paramNameUC = new TH1F("h$prefix$paramNameUC", "$sevtNameLC.$paramNameLC", $hBinSize, $hLowerLim.0, $hUpperLim.0);
%A% 			h$prefix$sevtNameUCArray.AddAt(h$prefix$paramNameUC, k$paramNameUC);
%A% 			gMrbAnalyze->AddHistoToList(h$prefix$paramNameUC, kMrbModule$moduleNameUC, $paramIndex);
%A% 	}
%E%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_HISTOGRAMS%%

%%BeginOfCode%%
%B%Bool_t TUsrSevt$sevtNameUC::BookParams() {
%B%//________________________________________________________________[C++ METHOD]
%B%//////////////////////////////////////////////////////////////////////////////
%B%// Name: 		  TUsrSevt$sevtNameUC::BookParams
%B%// Purpose:  	  Fill param list for subevent $sevtNameLC
%B%// Arguments:
%B%// Results:  	  kTRUE/kFALSE
%B%// Exceptions:
%B%// Description:    Generates entries in the list of params.
%B%// Keywords:
%B%//////////////////////////////////////////////////////////////////////////////
%B%
%S% 	if (gMrbAnalyze->FindParam("$paramNameLC") == NULL) gMrbAnalyze->AddParamToList("$paramNameLC", (TObject *) &$paramNameLC, kMrbModule$moduleNameUC, $paramIndex);
%X%	for (Int_t i = 0; i < $indexRange; i++) {
%X% 		TString pName = Form("$paramNameLC%d", i);
%X% 		if (gMrbAnalyze->FindParam(pName.Data()) == NULL) gMrbAnalyze->AddParamToList(pName.Data(), (TObject *) &$paramNameLC[i], kMrbModule$moduleNameUC, $paramIndex + i);
%X% 	}
%A% 	if (gMrbAnalyze->FindParam("$paramNameLC") == NULL) gMrbAnalyze->AddParamToList("$paramNameLC", (TObject *) &fData[k$paramNameUC], kMrbModule$moduleNameUC, $paramIndex);
%E%
%E%	return(kTRUE);
%E%}
%%EndOfCode%%
%%SEVT_BOOK_PARAMS%%

%%BeginOfCode%%
%BN%Bool_t TUsrSevt$sevtNameUC::FillHistograms() {
%BN%//________________________________________________________________[C++ METHOD]
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%// Name:           TUsrSevt$sevtNameUC::FillHistograms
%BN%// Purpose:        Accumulate histograms for subevent $sevtNameLC
%BN%// Arguments:
%BN%// Results:        kTRUE/kFALSE
%BN%// Exceptions:
%BN%// Description:    Loops thru hitbuffer and performs add-one to histograms.
%BN%// Keywords:
%BN%//////////////////////////////////////////////////////////////////////////////
%BN%
	for (Int_t i = 0; i < fHitBuffer.GetNofHits(); i++) {
		TUsrHit * hit = fHitBuffer->GetHitAt(i);
		TH1F * h = (TH1F *) gMrbAnalyze->GetHistoAddr(hit->GetModuleNumber(), hit->GetChannel());
		if (h) {
			UShort_t data = hit->GetEnergy();
			if (data == (UShort_t) -1) h->Fill((Axis_t) -1);
			else h->Fill((Axis_t) ((Int_t) data));
		}
	}
%%EndOfCode%%
%%SEVT_FILL_HISTOGRAMS%%

Bool_t TUsrSevt%%SEVT_NAME_UC%%::AddBranch(TTree * Tree) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::AddBranch
// Purpose:        Create a branch for subevent %%SEVT_NAME_LC%%
// Arguments:      TTree * Tree      -- pointer to parent's tree struct
// Results:        kTRUE/kFALSE
// Exceptions:
// Description:    Calls method TTree::Branch for this subevent.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	Int_t bufSize;
	Int_t splitMode;

	if (gMrbAnalyze->TreeToBeWritten()) {
		bufSize = gMrbAnalyze->GetBranchSize();
		splitMode = gMrbAnalyze->GetSplitLevel();
		if (verboseMode) {
			cout	<< this->ClassName() << "::AddBranch(): adding branch \"%%SEVT_NAME_LC%%\" to tree \""
					<< Tree->GetName() << "\" (bufsiz="
					<< bufSize
					<< ", split=" << splitMode << ")"
					<< endl;
		}
		fMyAddr = (TObject *) this; 		// we need a '**' ref to this object
		Tree->Branch( 	"%%SEVT_NAME_LC%%", this->ClassName(),
						&fMyAddr,
						bufSize,
						splitMode);
	}
	return(kTRUE);
}

%%BeginOfCode%%
%LVB%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%LVB%//________________________________________________________________[C++ METHOD]
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%LVB%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%LVB%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%LVB%// Results:        kTRUE/kFALSE
%LVB%// Exceptions:
%LVB%// Description:    Set branch addresses for ALL data members (leaves)
%LVB%//                 of subevent $sevtNameLC.
%LVB%//                 >> Replay mode only <<
%LVB%// Keywords:
%LVB%//////////////////////////////////////////////////////////////////////////////
%LVB%
%LVB%	Tree->GetEntry(0);						// dummy statement to activate branches (?)
%LVB%
%LVS%	Tree->SetBranchAddress("$prefix$paramNameLC", &$paramNameLC);	// $sevtNameLC.$paramNameLC
%LVX%	Tree->SetBranchAddress("$prefix$paramNameLC[$indexRange]", $paramNameLC);	// $sevtNameLC.$paramNameLC
%LVA%	Tree->SetBranchAddress("pData[$nofParams]", fData);
%LVE%	Tree->SetBranchAddress("fTimeStamp", &fTimeStamp);		// (sub)event's time stamp
%LVE%
%LVE%	return(kTRUE);
%LVE%}
%BR%Bool_t TUsrSevt$sevtNameUC::InitializeBranch(TTree * Tree) {
%BR%//________________________________________________________________[C++ METHOD]
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%// Name:           TUsrSevt$sevtNameUC::InitializeBranch
%BR%// Purpose:        Initialize branch addresses for subevent $sevtNameLC
%BR%// Arguments:      TTree * Tree      -- pointer to parent's tree struct
%BR%// Results:        kTRUE/kFALSE
%BR%// Exceptions:
%BR%// Description:    Set branch address for subevent $sevtNameLC.
%BR%//                 Subevent will be fetched from tree AS A WHOLE.
%BR%//                 >> Replay mode only <<
%BR%// Keywords:
%BR%//////////////////////////////////////////////////////////////////////////////
%BR%
%BR%	fBranch = Tree->GetBranch("$sevtNameLC");
%BR%	fMyAddr = this;
%BR%	fBranch->SetAddress(&fMyAddr);
%BR%
%BR%	return(kTRUE);
%BR%}
%%EndOfCode%%
%%SEVT_INITIALIZE_BRANCH%%

void TUsrSevt%%SEVT_NAME_UC%%::Reset(Int_t InitValue, Bool_t DataOnly) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TUsrSevt%%SEVT_NAME_UC%%::Reset
// Purpose:        Reset subevent data
// Arguments:      Int_t InitValue   -- initialization value
//                 Bool_t DataOnly   -- do not reset hit buffer if kFALSE
// Results:        --
// Exceptions:
// Description:    Initializes subevent data (InitValue ignored!)
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	if (!DataOnly) this->GetHitBuffer()->Reset();			// reset hit buffer
%%BeginOfCode%%
%S%	$paramNameLC.ClearData();	// $sevtNameLC.$paramNameLC
%X%	for (Int_t i = 0l; i < $indexRange; i++) $paramNameLC[i].ClearData();	// $sevtNameLC.$paramNameLC
%A%	for (Int_t i = k$firstParam; i <= k$lastParam; i++) fData[i].ClearData();
%%EndOfCode%%
%%SEVT_RESET_DATA%%
}
