%%BeginOfCode%%
//______________________________________________________[C++ CLASS DEFINITION]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbSubevent_DGF_2
// Purpose:        Base class for subevents containing DGF data
// Description:    Provides basic methods for DGF subevents
// Keywords:       
//////////////////////////////////////////////////////////////////////////////

class TMrbSubevent_DGF_2 : public TObject {

	public:
		TMrbSubevent_DGF_2() {};						// ctor
		~TMrbSubevent_DGF_2() {};						// default dtor

		Bool_t FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp);	// fill subevent from MBS data

		inline TUsrHitBuffer * AllocHitBuffer(const Char_t * Name, Int_t NofEntries, Int_t HighWater = 0) {	// allocate buffer space
			fHitBuffer.SetName(Name);
			fHitBuffer.AllocClonesArray(NofEntries, HighWater);
			return(&fHitBuffer);
		};
		inline TUsrHitBuffer * GetHitBuffer() { return(&fHitBuffer); };
		
	protected:
		inline void SetTimeStamp(Int_t TimeStamp) { SetUniqueID(TimeStamp); };

	protected:
		TObject * fMyAddr;						//! ptr to subevent to be used in TTree::Branch() (online)
		TBranch * fBranch;						//! branch address (replay only)

		Int_t fTimeStamp;						// time stamp, same as fUniqueID

		TUsrHitBuffer fHitBuffer; 				// hit buffer to store subevent data

	ClassDef(TMrbSubevent_DGF_2, 1)				// [Analyze] Base class for subvents: store DGF data in hit buffer
};
%%EndOfCode%%
%%SEVT_CLASS_DEFINITION%%
