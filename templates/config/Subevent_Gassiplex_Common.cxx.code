%%BeginOfCode%%

Bool_t TMrbSubevent_Gassiplex::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:           TMrbSubevent_Gassiplex::FillSubevent
// Purpose: 	   Decode GASSIPLEX buffer
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:
// Description:    Decodes data from a Gassiplex module.
// Keywords:
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event
	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record
	Int_t origSevtWC = SevtWC;				// save original subevent wc
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several madc modules
		Int_t moduleNumber = (*dataPtr++ << 16);	// word#0: serial number
		moduleNumber |= *dataPtr++;
		Int_t wc = (*dataPtr++ << 16);			// word#1: wc (bytes)
		wc |=  *dataPtr++;
		wc /= 4;					// wc (32bit words)
		Int_t wcs = 2 * wc;
		wc -= 4;					// strip header words off
		dataPtr += 8;					// 4*32bit -> 8*16bit

		TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
		if (mle == NULL) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}

		mle->IncrEventHits();				// count this event

		UShort_t evtData[TUsrHit::kHitGassiDprRest + 1];
		for (; wc; wc--) {
			Int_t data = (*dataPtr++ << 16);
			data |= *dataPtr++;
      			evtData[TUsrHit::kHitEnergy] = data & 0x03ff;
      			Int_t chn = (data >> 10) & 0x003f;;
			evtData[TUsrHit::kHitGassiChannel] = (UShort_t) chn;
      			evtData[TUsrHit::kHitGassiModule] = (UShort_t) (data >> 16) & 0x0007;
      			evtData[TUsrHit::kHitGassiPort] = (UShort_t) (data >> 19) & 0x0007;
      			evtData[TUsrHit::kHitGassiRace] = (UShort_t) (data >> 22) & 0x0001;
      			evtData[TUsrHit::kHitGassiSector] = (UShort_t) (data >> 23) & 0x0007;
      			evtData[TUsrHit::kHitGassiDprRest] = (UShort_t) (data >> 26) & 0x00ff;
			mle->IncrChannelHits(chn);			// count this channel
			TUsrHit * hit = this->GetHitBuffer()->AddHit(	eventsProcessed,
											moduleNumber,
											chn,
											0, 0, 0,
											evtData, TUsrHit::kHitGassiDprRest + 1);
			if (hit == NULL) {
				cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Error while filling hitbuffer - giving up"
					<< setblack << endl;
				return(kTRUE);
			}
		}

		SevtWC -= wcs + 2;						// remaining subevent data
		wordsProcessed += wcs + 2;
		eventsProcessed++;
	}
	return(kTRUE);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%


%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
