%%BeginOfCode%%
Bool_t TMrbSubevent_Caen::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Caen::FillSubevent
// Purpose: 	   Decode CAEN buffer
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:     
// Description:    Decodes data from a CAEN Vxxx.
// Keywords:	   
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	this->GetHitBuffer()->Reset();			// clear hit buffer

	recNo++;						// count this record	
	Int_t origSevtWC = SevtWC;				// save original subevent wc
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	Int_t wordsProcessed = 0; 			// words processed so far
	UShort_t * dataPtr = (UShort_t *) SevtData;
	Int_t eventsProcessed = 0;
	while (SevtWC > 0) {									// subevent may contain several CAEN modules
		Int_t header = (*dataPtr++) << 16; 					// header word (MSB)
		header |= *dataPtr++; 								// header word (LSB)
		if ((header & CAEN_Vxxx_D_HDR) == 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong header - 0x" << setbase(16) << header << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		Int_t wc = (header >> CAEN_Vxxx_SH_WC) & CAEN_Vxxx_M_WC;				// extract wc
		Int_t wcs = wc;
		if (wc < 0 || wc > 32) {				// max 32 data words
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong word count", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong word count - " << wc << setblack << endl;
			return(kTRUE);
		}
		Int_t moduleNumber = header & CAEN_Vxxx_M_MSERIAL;	// extract module number
		TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
		if (mle == NULL) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent() [sevtWC="
					<< wordsProcessed << "] Wrong module number - " << moduleNumber
					<< setblack << endl;
			return(kTRUE);
		}

		if (eventsProcessed >= CAEN_Vxxx_N_MAXEVENTS) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Too many events", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): [Module "
					<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
					<< wordsProcessed << "] Too many events - max " << CAEN_Vxxx_N_MAXEVENTS << setblack << endl;
			return(kTRUE);
		}

		mle->IncrEventHits();				// count this event

		UShort_t evtData[2];
		for (; wc; wc--) {
			Int_t data = (*dataPtr++) << 16;		// data (MSB)
			data |= *dataPtr++; 			// data (LSB)
			if ((data & CAEN_Vxxx_M_ID) != CAEN_Vxxx_D_DATA) {
				if ((data & CAEN_Vxxx_M_ID) == CAEN_Vxxx_D_EOB) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Unexpected EOB", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent(): [Module "
							<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC=" << wordsProcessed
							<< "] Unexpected EOB - remaining wc=" << wc << " ignored. Continuing with next event."
							<< setblack << endl;
					dataPtr -= 2;
					wcs -= wc;
					break;
				} else {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong data", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent(): [Module "
							<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
							<< wordsProcessed << "] Wrong data - 0x" << setbase(16) << data << setbase(10)
							<< setblack << endl;
					return(kTRUE);
				}
			}
			Int_t chn = (data >> CAEN_Vxxx_SH_CHN) & CAEN_Vxxx_M_CHN;
			mle->IncrChannelHits(chn);			// count this channel
			evtData[0] = 0;
			if (data & CAEN_Vxxx_B_OVERFLOW) evtData[1] = CAEN_Vxxx_B_OVERFLOW;
			else if (data & CAEN_Vxxx_B_UNDERTHRESH) evtData[1] = (UShort_t) -1;
			else evtData[1] = (UShort_t) (data & CAEN_Vxxx_M_ADCDATA);
			this->GetHitBuffer()->AddHit(	eventsProcessed,
											moduleNumber,
											chn,
											NULL,
											evtData, 2);
		}
		Int_t trailer = (*dataPtr++) << 16; 					// trailer word (MSB)
		trailer |= *dataPtr++; 									// trailer word (LSB)
		if ((trailer & CAEN_Vxxx_D_EOB) == 0) {
			gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong EOB", SevtData, origSevtWC);
			cerr	<< setred
					<< this->ClassName() << "::FillSubevent(): [Module "
					<< gMrbAnalyze->GetModuleName(moduleNumber) << " (" << moduleNumber << "), sevtWC="
					<< wordsProcessed << "] Wrong EOB - 0x" << setbase(16) << trailer << setbase(10)
					<< setblack << endl;
			return(kTRUE);
		}
		wcs = (wcs + 2) * 2;
		SevtWC -= wcs;						// remaining subevent data
		wordsProcessed += wcs;
		eventsProcessed++;
	}
	return(kTRUE);
}

Int_t TMrbSubevent_Caen::FillData(Int_t * ParArr[], Int_t Index) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Caen::FillData
// Purpose: 	   Copy one event to subevent vector
// Arguments:	   Int_t * ParArr[]       -- array containing pointers to params
//  			   Int_t Index            -- start index in hit buffer
// Results: 	   Int_t NextIndex        -- index to start over, -1 of end of buffer
// Exceptions:     
// Description:    Copies next event from hitbuffer to subevent vector.
// Keywords:	   
//////////////////////////////////////////////////////////////////////////////

	TClonesArray * hits = fHitBuffer.GetCA();
	Int_t nofHist = fHitBuffer.GetNofHits();
	if (nofHits > 0) {
		TUsrHit * h = hits->At(Index);
		Int_t evtNo = h->GetEventNumber();
		for (Int_t hit = Index; hit < nofHits; hit++) {
			h = hbx->At(hit);
			if (evtNo != h->GetEventNumber()) return(hit);
			evtNo = h->GetEventNumber();
			Int_t * pa = ParArr[h->GetChannel()];
			if (pa) *pa = h->GetEnergy();
		}
	}
	return(-1);
}

%%EndOfCode%%
%%SEVT_CLASS_METHODS%%

		
%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
