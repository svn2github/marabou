%%BeginOfCode%%
Bool_t TMrbSubevent_Caen_V1190::FillSubevent(const UShort_t * SevtData, Int_t SevtWC, Int_t TimeStamp) {
//________________________________________________________________[C++ METHOD]
//////////////////////////////////////////////////////////////////////////////
// Name:		   TMrbSubevent_Caen_V1190::FillSubevent
// Purpose: 	   Decode CAEN buffer
// Arguments:	   const UShort_t * SevtData   -- pointer to unpacked subevent data
//  			   Int_t SevtWC 			   -- word count
//  			   Int_t TimeStamp  		   -- time since last start
//  											  in units of 100 microsecs
// Results: 	   kTRUE/kFALSE
// Exceptions:     
// Description:    Decodes data from a CAEN Vxxx.
// Keywords:	   
//////////////////////////////////////////////////////////////////////////////

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	this->GetHitBuffer()->Reset();			// clear hit buffer

	UShort_t * dataPtr;
	Int_t data;
	Int_t * paramAddr;
	Int_t wordsProcessed;
					
	static Bool_t checkIfMultiHitAllowed = kTRUE;
	static Bool_t allowMultiHit = kFALSE;

	fTimeStamp = TimeStamp; 				// store time since last "start acquisition"
	this->SetTimeStamp(TimeStamp);			// passed as argument by parent event

	recNo++;						// count this record	
	Int_t origSevtWC = SevtWC;				// save original subevent wc
	if (forcedDump && (SevtWC > 0)) gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Forced dump", SevtData, origSevtWC);
	wordsProcessed = 0; 			// words processed so far
	dataPtr = (UShort_t *) SevtData;

	Int_t moduleNumber;
	Int_t evtCount;
	Int_t evtId;
	Int_t bunchId;
	Int_t tdcNumber;
	Int_t evtWc;
	Int_t tdcWc;
	Int_t chn;

	UInt_t expect = CAEN_V1x90_X_GH;			// we expect a global header at beginning
	while (SevtWC > 0) {						// subevent may contain several events/tdcs

		Int_t data = (*dataPtr++) << 16;		// get next 32 bit word
		data |= *dataPtr++;
		SevtWC -= 2;

		UInt_t hdrBits = (data >> CAEN_V1x90_SH_HDR_TRL) & CAEN_V1x90_M_HDR_TRL;

		// global header
		if ((expect & CAEN_V1x90_X_GH) != 0) {
			if (hdrBits == CAEN_V1x90_D_GLOBAL_HDR) {
				moduleNumber = data & CAEN_V1x90_M_GH_SERIAL;						// extract module number
				TMrbModuleListEntry * mle = gMrbAnalyze->GetModuleListEntry(moduleNumber);
				if (mle == NULL) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong module number", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent() [sevtWC="
							<< wordsProcessed << "] Wrong module number - " << moduleNumber
							<< setblack << endl;
					return(kTRUE);
				}
				evtCount = (data >> CAEN_V1x90_SH_GH_EVTCNT) & CAEN_V1x90_M_GH_EVTCNT;	// event count
				evtWc = 1;
				expect = CAEN_V1x90_X_TH;			// we expect a tdc header now
				continue;							// global header done
			} else {
				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
				cerr	<< setred
						<< this->ClassName() << "::FillSubevent() [sevtWC="
						<< wordsProcessed << "] Not a global header - 0x" << setbase(16) << data << setbase(10)
						<< setblack << endl;
				return(kTRUE);
			}
		// tdc header or global trailer
		} else if ((expect & (CAEN_V1x90_X_TH | CAEN_V1x90_X_GT)) != 0) {
			if (hdrBits == CAEN_V1x90_D_TDC_HDR) {
				evtId = (data >> CAEN_V1x90_SH_TDC_EID) & CAEN_V1x90_M_TDC_EID;
				bunchId = data & CAEN_V1x90_M_TDC_BID;
				tdcNumber = (data >> CAEN_V1x90_SH_TDC_NUM) & CAEN_V1x90_M_TDC_NUM;
				expect = CAEN_V1x90_X_TD | CAEN_V1x90_X_TT;			// we expect tdc data or tdc trailer
				evtWc++;
				tdcWc = 1;
				continue;							// global header done
			} else if (hdrBits == CAEN_V1x90_D_GLOBAL_TRL) {
				evtWc++;
				Int_t wc = (data >> CAEN_V1x90_SH_GT_WC) & CAEN_V1x90_M_GT_WC;
				if (wc != evtWc) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong event wc", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent() [sevtWC="
							<< wordsProcessed << "] Wrong event word count - " << wc << " (sould be " << evtWc << ")"
							<< setblack << endl;
					return(kTRUE);
				}
				expect = CAEN_V1x90_X_GH;							// we start over
				evtWc = 0;
				continue;
			} else {
				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong header", SevtData, origSevtWC);
				cerr	<< setred
						<< this->ClassName() << "::FillSubevent() [sevtWC="
						<< wordsProcessed << "] Neither a tdc header nor a global trailer - 0x" << setbase(16) << data << setbase(10)
						<< setblack << endl;
				return(kTRUE);
			}
		// tdc data or tdc trailer
		} else if ((expect & (CAEN_V1x90_X_TD | CAEN_V1x90_X_TT)) != 0) {
			if (hdrBits == CAEN_V1x90_D_TDC_DATA) {
				chn = (data >> CAEN_V1x90_SH_TDC_CHN) & CAEN_V1x90_M_TDC_CHN;
				mle->IncrChannelHits(chn);			// count this channel
				UShort_t evtData[2];
				evtData[0] = 0;
				evtData[1] = (UShort_t) (data & CAEN_V1x90_M_TDC_DATA);
				this->GetHitBuffer()->AddHit(	eventsProcessed,
												moduleNumber,
												chn,
												NULL,
												evtData, 2);
				evtWc++;
				tdcWc++;
				expect = CAEN_V1x90_X_TD | CAEN_V1x90_X_TT;			// we expect still tdc data or tdc trailer
				continue;											// tdc data done
			} else if (hdrBits == CAEN_V1x90_D_TDC_TRL) {
				Int_t eid = (data >> CAEN_V1x90_SH_TDC_EID) & CAEN_V1x90_M_TDC_EID;
				if (eid != evtId) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong event id", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent() [sevtWC="
							<< wordsProcessed << "] Wrong event id in tdc trailer - 0x" << setbase(16) << eid << " (sould be " << evtId << ")" << setbase(10)
							<< setblack << endl;
					return(kTRUE);
				}
				tdcWc++;
				Int_t wc = data & CAEN_V1x90_M_TDC_WC;
				if (wc != tdcWc) {
					gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong tdc wc", SevtData, origSevtWC);
					cerr	<< setred
							<< this->ClassName() << "::FillSubevent() [sevtWC="
							<< wordsProcessed << "] Wrong tdc word count - " << wc << " (sould be " << tdcWc << ")"
							<< setblack << endl;
					return(kTRUE);
				}
				evtWc++;
				tdcWc = 0;
				expect = CAEN_V1x90_X_TH | CAEN_V1x90_X_GT;			// we expect a tdc header or a global trailer
				continue;											// tdc trailer done
			} else {
				gMrbAnalyze->DumpData("sevt", recNo, this->ClassName(), "FillSubevent", "Wrong data", SevtData, origSevtWC);
				cerr	<< setred
						<< this->ClassName() << "::FillSubevent() [sevtWC="
						<< wordsProcessed << "] Data out of phase - 0x" << setbase(16) << data << " (expecting tdc data or trailer)" << setbase(10)
						<< setblack << endl;
				return(kTRUE);
			}
		}
	}
	return(kTRUE);
}			
%%EndOfCode%%
%%SEVT_CLASS_METHODS%%

		
%%BeginOfCode%%

%%EndOfCode%%
%%INCLUDE_EVT_SEVT_MOD_GLOBALS%%

%%BeginOfCode%%

%%EndOfCode%%
%%INITIALIZE_EVT_SEVT_MODS%%
